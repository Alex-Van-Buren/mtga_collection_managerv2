{"version":3,"sources":["components/SetDetails/SetDetailsMenu.js","components/SetDetails/DisplayOptions.js","hooks/useBooster.js","data/packsNeeded.js","components/SetDetails/PacksCalculator.js","hooks/useDraft.js","data/draftsNeeded.js","components/SetDetails/DraftsCalculator.js","hooks/useResizeWidth.js","components/SetDetails/CardModal.js","components/All/SetNotFound.js","components/SetDetails/SetDetails.js","components/All/ProgressBar.js","components/All/RarityCollectionItem.js"],"names":["SetDetailsMenu","dispatch","useDispatch","activeTab","useSelector","state","displayOptions","Array","fill","cardFiltersClass","packsClass","draftsClass","className","id","onClick","selectDetailsMenu","onKeyDown","e","key","tabIndex","role","DisplayOptions","SearchBar","RarityButtons","header","ColorCheckboxes","NumberOwnedDropdown","BoosterDropdown","CMCDropdowns","CardTypeDropdown","Reset","useBooster","setId","boosters","inventory","player","Boosters","booster","SetCode","toLowerCase","Count","packsNeeded","rarity","numCardsOwned","numCardsTotal","mythicUpgradeRate","setInfo","mythic_upgrade","rareRate","nonWildcardRate","rare_rate","packsToComplete","numMissing","Math","ceil","PacksCalculator","useParams","ownedBoosters","set","rare","raresOwned","ownedTotal","raresTotal","setTotal","packsToCompleteRares","mythic","mythicsOwned","mythicsTotal","packsToCompleteMythics","collationId","message","name","interpolate","rateHigh","valHigh","rateLow","valLow","rateUser","draftsNeeded","cardsPicked","rewardPacks","ownedPacks","rarityOpenRate","numerator","denominator","parseFloat","DraftsCalculator","useState","draftType","setDraftType","winRate","setWinRate","debouncedWinRate","setDebouncedWinRate","raresPicked","setRaresPicked","debouncedRaresPicked","setDebouncedRaresPicked","mythicsPicked","setMythicsPicked","debouncedMythicsPicked","setDebouncedMythicsPicked","useEffect","draftWinRate","window","localStorage","getItem","draftRaresPicked","draftMythicsPicked","preferredDraftType","timeoutid","setTimeout","setItem","clearTimeout","lookup","premierLookup","quickLookup","traditionalLookup","toFixed","floor","gems","avgGems","packs","avgPacks","gemsHigh","packsHigh","gemsLow","packsLow","useDraft","rareDraftsNeeded","mythicDraftsNeeded","rareCost","gold","mythicCost","totalRareGemReward","toLocaleString","totalMythicGemReward","renderDropDown","CustomDropdown","items","ariaLabel","firstSelection","selectfn","item","checkCardsPicked","value","valueNum","renderWinRate","htmlFor","type","min","max","onChange","checkWinRate","target","renderRaresPickedInput","step","renderMythicsPickedInput","renderOutput","src","gold_img","alt","gem_img","href","useResizeWidth","width","innerWidth","size","setSize","debouncedResize","func","delay","timer","apply","arguments","debounce","addEventListener","removeEventListener","CardModal","show","modal","showCardModal","content","cardContent","index","imgSide","imageList","img","imgLength","length","goLeft","useCallback","setCardModalContent","goRight","flipCard","back","imgRef","current","style","transition","sideBoolean","flipRef","animation","includes","prevRef","useRef","nextRef","BUTTON_CLASS","exit","prev","aria-label","title","aria-keyshortcuts","ref","disabled","blur","next","cardImage","front","flipButton","event","stopPropagation","renderedContent","keyEvents","keys","keyFunction","Modal","setShow","val","SetNotFound","U","G","SetDetails","document","body","scrollTop","documentElement","sum","Object","forEach","percentOwned","setName","activeTabComponent","setDetailsColumns","displayOptionsColumns","detailsHeader","logo","RarityCollectionItem","CardList","ProgressBar","percent","innerClass","innerRef","symbol","slice"],"mappings":"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","file":"static/js/5.d01eaafc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectDetailsMenu } from '../../actions';\r\nimport '../../css/SetDetailsMenu.css';\r\n\r\nfunction SetDetailsMenu() {\r\n    // Get dispatch function\r\n    const dispatch = useDispatch();\r\n\r\n    // Get active tab info from redux\r\n    const activeTab = useSelector(state => state.displayOptions.activeTab);\r\n    \r\n    // Fill each class with common class names\r\n    let [cardFiltersClass, packsClass, draftsClass] = Array(3).fill('setDetailsTab');\r\n\r\n    // Add additional class 'active' if tab is active\r\n    switch (activeTab) {\r\n        case 'Card Filters':\r\n            cardFiltersClass += ' active';\r\n            break;\r\n\r\n        case 'Packs':\r\n            packsClass += ' active';\r\n            break;\r\n\r\n        case 'Drafts':\r\n            draftsClass += ' active';\r\n            break;\r\n            \r\n        default:\r\n           break;\r\n    }\r\n    \r\n    // Return JSX for tab menu\r\n    return (\r\n        <div className=\"setDetailsTabs\">\r\n            <div className={cardFiltersClass} id=\"cardFiltersTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Card Filters'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Card Filters'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n                Filter Displayed Cards\r\n            </div>\r\n            <div className={packsClass} id=\"packCalcTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Packs'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Packs'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n               Booster Calculator\r\n            </div>\r\n            <div className={draftsClass} id=\"draftCalcTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Drafts'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Drafts'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n                Draft Calculator\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetDetailsMenu;","import React from 'react';\r\n\r\nimport NumberOwnedDropdown from './NumberOwnedDropdown';\r\nimport BoosterDropdown from './BoosterDropdown';\r\nimport CMCDropdowns from './CMCDropdowns';\r\nimport ColorCheckboxes from './ColorCheckboxes';\r\nimport Reset from './Reset';\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport RarityButtons from './RarityButtons';\r\nimport CardTypeDropdown from './CardTypeDropdown'\r\nimport '../../css/DisplayOptions.css';\r\n\r\nfunction DisplayOptions() {\r\n    return (\r\n    <div className=\"DisplayOptions\">\r\n        <SearchBar/>\r\n        <RarityButtons header=\"Select Rarity/Rarities to Show:\" />\r\n\r\n        {/* Checkboxes for color: White, Blue, Black, Red, Green, All Multicolored, Colorless */}\r\n        <ColorCheckboxes header=\"Select Color/Colors to Show:\"/>\r\n\r\n        {/* DropDowns that select cards to show based on number in inventory and whether they are in boosters*/}\r\n        <div className=\"display-options-dropdowns\">\r\n            <NumberOwnedDropdown header=\"Number You Own:\" />\r\n            <BoosterDropdown header=\"In Booster Packs?\" />\r\n            <CMCDropdowns header=\"Select Mana Costs:\"/>\r\n            <CardTypeDropdown />\r\n            <Reset />\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default DisplayOptions;","import { useSelector } from 'react-redux';\r\n\r\nfunction useBooster(setId) {\r\n\r\n    // Get the boosters owned by the player\r\n    const boosters = useSelector(state => state.inventory.player.Boosters);\r\n\r\n    for (const booster of boosters) {\r\n        if ( booster.SetCode.toLowerCase() === setId ) {\r\n\r\n            // Get the number and stop checking \r\n            return booster.Count;\r\n        }\r\n    }\r\n\r\n    return 0;   \r\n}\r\n\r\nexport default useBooster;","import { setInfo } from './setInfo';\r\n\r\n/**\r\n * \r\n * @param {String} setId 3 letter set Id \r\n * @param {String} rarity \"rare\" or \"mythic\"\r\n * @param {Number} numCardsOwned Number of cards owned of the given rarity and set\r\n * @param {Number} numCardsTotal Total number of cards of the given rarity in set\r\n * @returns Returns the average number of packs required to open to achieve 100% completion of the given rarity\r\n */\r\nfunction packsNeeded(setId, rarity, numCardsOwned, numCardsTotal) {\r\n\r\n    // use setId to get the mythic upgrade rate from setInfo and get rareRate using this value\r\n    let mythicUpgradeRate = setInfo[setId].mythic_upgrade;\r\n    let rareRate = 1 - mythicUpgradeRate;\r\n\r\n    // The wildcard rate for mythics and for rares is (1/30) each so the nonWildcard rate is 1-(1/30)-(1/30)  = (14/15)\r\n    const nonWildcardRate = 14/15;\r\n\r\n    // For strixhaven mystical archive the rareRate is explicit since a rare/mythic is not in every pack\r\n    if ( setId === 'sta' ) {\r\n        // Mystical archive cards can NOT upgrade to wildcards\r\n        // therefore these values are divided by the nonWildcardRate in order to cancel out the term in the packsToComplete calculation\r\n        rareRate = setInfo[setId].rare_rate / nonWildcardRate;\r\n        mythicUpgradeRate = mythicUpgradeRate / nonWildcardRate;\r\n    }\r\n\r\n    // Calculate the number of cards missing\r\n    const numMissing = numCardsTotal - numCardsOwned;\r\n\r\n    let packsToComplete;\r\n\r\n    // If the rarity of the missing cards is \"rare\", we subtract the mythic upgrade rate from 1 to get the rare rate\r\n    if ( rarity === 'rare' ) {\r\n        packsToComplete = numMissing / (rareRate * nonWildcardRate);\r\n    }\r\n    // rarity === 'mythic'\r\n    else {\r\n        packsToComplete = numMissing / (mythicUpgradeRate * nonWildcardRate);\r\n    }\r\n\r\n    packsToComplete = Math.ceil(packsToComplete)\r\n\r\n    return packsToComplete; \r\n\r\n}\r\n\r\nexport default packsNeeded;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport useBooster from '../../hooks/useBooster';\r\n\r\nimport packsNeeded from '../../data/packsNeeded';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport '../../css/PacksCalculator.css';\r\n\r\nfunction PacksCalculator() {\r\n    const { setId } = useParams();\r\n\r\n    const ownedBoosters = useBooster(setId);\r\n\r\n    // Grab values from redux and compute the average number of packs required to 100% complete rare collection\r\n    const { ownedTotal: raresOwned, setTotal: raresTotal } = useSelector( ({inventory}) => inventory.set[setId].rare);\r\n    const packsToCompleteRares = packsNeeded(setId, 'rare' , raresOwned, raresTotal);\r\n\r\n    // Grab values from redux and compute the average number of packs required to 100% complete mythic collection\r\n    const { ownedTotal: mythicsOwned, setTotal: mythicsTotal } = useSelector( ({inventory}) => inventory.set[setId].mythic);\r\n    const packsToCompleteMythics = packsNeeded(setId, 'mythic' , mythicsOwned, mythicsTotal);\r\n\r\n    // Check if the set is obtainable from normal boosters\r\n    if ( !setInfo[setId].collationId ) {\r\n        const message = `${setInfo[setId].name} is not obtainable from normal Booster Packs`;\r\n        return (\r\n            // The styling for this id is reused from PackCalculator.css\r\n            <div id=\"notAvailable\">\r\n                <h2>{message}</h2>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"calculator\"> \r\n            <h2>Packs Owned: {ownedBoosters}</h2>\r\n            <h2>Additional Packs Needed to Complete:</h2>       \r\n            <h3>Rares: <span className=\"packNumber\">{packsToCompleteRares - ownedBoosters}</span> </h3>                        \r\n            <h3>Mythics: <span className=\"packNumber\">{packsToCompleteMythics - ownedBoosters}</span> </h3>            \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PacksCalculator;","import premierLookup from '../data/premierLookup.json';\r\nimport quickLookup from '../data/quickLookup.json';\r\nimport traditionalLookup from '../data/traditionalLookup.json';\r\n\r\n/**\r\n * Uses Monte Carlo data from 10 million drafts as lookup table and interpolates\r\n * to determine average gem and pack rewards for the given win rate and draft type.\r\n * @param {*} draftType Draft type: \"premier\", \"quick\", or \"traditional\"\r\n * @param {*} winRate Number between 0.00 and 1.00\r\n * @returns \\{ gems, packs }\r\n */\r\nexport default function useDraft(draftType, winRate) {\r\n    \r\n    // Get lookup table\r\n    let lookup;\r\n    switch (draftType) {\r\n        case \"premier\":\r\n            lookup = premierLookup;\r\n            break;\r\n        case \"quick\":\r\n            lookup = quickLookup;\r\n            break;\r\n        case \"traditional\":\r\n            lookup = traditionalLookup;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    const rateHigh = (Math.ceil(winRate*100)/100).toFixed(2);\r\n    const rateLow = (Math.floor(winRate*100)/100).toFixed(2);\r\n\r\n    // Check if high and low are the same\r\n    if (rateHigh === rateLow) {\r\n        return { gems: lookup[rateHigh].avgGems, packs: lookup[rateHigh].avgPacks };\r\n    }\r\n    \r\n    // Else interpolate\r\n    const gemsHigh = lookup[rateHigh].avgGems;\r\n    const packsHigh = lookup[rateHigh].avgPacks;\r\n    const gemsLow = lookup[rateLow].avgGems;\r\n    const packsLow = lookup[rateLow].avgPacks;\r\n\r\n    const gems = interpolate({ rateHigh, valHigh:gemsHigh, rateLow, valLow:gemsLow, rateUser:winRate});\r\n    const packs = interpolate({ rateHigh, valHigh:packsHigh, rateLow, valLow:packsLow, rateUser:winRate});\r\n\r\n    return { gems, packs };\r\n}\r\n\r\n// Interpolates from lookup table\r\nfunction interpolate({rateHigh, valHigh, rateLow, valLow, rateUser}) {\r\n\r\n    const numerator = valLow * (rateHigh - rateUser) + valHigh * (rateUser - rateLow);\r\n    const denominator = rateHigh - rateLow;\r\n\r\n    return numerator / denominator;\r\n}","import { setInfo } from './setInfo';\r\n\r\nfunction draftsNeeded(setId, rarity, ownedTotal, setTotal, cardsPicked, rewardPacks, ownedPacks=0) {\r\n    const mythicUpgradeRate = setInfo[setId].mythic_upgrade;\r\n    const numMissing = setTotal - ownedTotal;\r\n\r\n    // The wildcard rate for mythics and for rares is (1/30) each so the nonWildcard rate is 1-(1/30)-(1/30)  = (14/15)\r\n    const nonWildcardRate = 14/15;\r\n\r\n    // Most cards picked will be rare, but account for specific mythic upgrade rate\r\n    // Default value is for when rarity === \"rare\"\r\n    let rarityOpenRate = 1 - mythicUpgradeRate;\r\n\r\n    if (rarity === \"mythic\") {\r\n        rarityOpenRate = mythicUpgradeRate;\r\n    }\r\n    // Strixhaven mytical archive works differently and has a rare rate as well as a mythic rate\r\n    if (setId === 'sta') {\r\n        // Mystical archive cards also can NOT upgrade to wildcards\r\n        // therefore these values are divided by the nonWildcardRate in order to cancel out the term in the numerator/denominator calculation\r\n        if (rarity === 'rare') {\r\n            rarityOpenRate = setInfo[setId].rare_rate / nonWildcardRate;\r\n        }\r\n        if ( rarity === 'mythic') {\r\n            rarityOpenRate = setInfo[setId].mythic_upgrade / nonWildcardRate;\r\n        }\r\n    }\r\n\r\n    const numerator = numMissing - ownedPacks * rarityOpenRate * nonWildcardRate;\r\n    const denominator = parseFloat(cardsPicked) + rewardPacks * rarityOpenRate * nonWildcardRate;\r\n\r\n    // Round number of drafts up to whole number\r\n    return Math.ceil(numerator / denominator);\r\n}\r\n\r\nexport default draftsNeeded;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport CustomDropdown from '../Templates/CustomDropdown';\r\nimport useBooster from '../../hooks/useBooster';\r\nimport useDraft from '../../hooks/useDraft';\r\nimport draftsNeeded from '../../data/draftsNeeded';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport '../../css/DraftsCalculator.css';\r\n\r\nimport gem_img from '../../images/arena/Gem.png';\r\nimport gold_img from '../../images/arena/Gold.png';\r\n\r\nfunction DraftsCalculator() {\r\n    const [draftType, setDraftType] = useState(\"premier\");\r\n    const [winRate, setWinRate] = useState(50);\r\n    const [debouncedWinRate, setDebouncedWinRate] = useState(winRate);\r\n    const [raresPicked, setRaresPicked] = useState(2.6);\r\n    const [debouncedRaresPicked, setDebouncedRaresPicked] = useState(raresPicked);\r\n    const [mythicsPicked, setMythicsPicked] = useState(0.4);\r\n    const [debouncedMythicsPicked, setDebouncedMythicsPicked] = useState(mythicsPicked);\r\n    \r\n    // Reset the default values for winRate, raresPicked, mythicsPicked, and draftType to values from localstate if possible\r\n    useEffect(() => {\r\n        // Get the values from localstorage --> will be null if user hasn't used before or cleared the localStorage\r\n        const draftWinRate = window.localStorage.getItem('draftWinRate');\r\n        const draftRaresPicked = window.localStorage.getItem('draftRaresPicked');\r\n        const draftMythicsPicked = window.localStorage.getItem('draftMythicsPicked');\r\n        const preferredDraftType = window.localStorage.getItem('preferredDraftType');\r\n\r\n        // set the values and debounced values to the localStorage values if the value was found in localStorage\r\n        if ( draftWinRate ){\r\n            setDebouncedWinRate(draftWinRate);\r\n            setWinRate(draftWinRate);\r\n        }\r\n        if ( draftRaresPicked ){\r\n            setDebouncedRaresPicked(draftRaresPicked);\r\n            setRaresPicked(draftRaresPicked);\r\n        }\r\n        if ( draftMythicsPicked ){\r\n            setDebouncedMythicsPicked(draftMythicsPicked);\r\n            setMythicsPicked(draftMythicsPicked);\r\n        }\r\n        if ( preferredDraftType ) {\r\n            setDraftType(preferredDraftType);\r\n        }\r\n\r\n    },[]);\r\n    \r\n    // Grab set id from url\r\n    const { setId } = useParams();\r\n\r\n    const ownedBoosters = useBooster(setId);\r\n\r\n    // Get mythic/rare totals from redux\r\n    const { ownedTotal: mythicsOwned, setTotal: mythicsTotal } = useSelector( ({inventory}) => inventory.set[setId].mythic);\r\n    const { ownedTotal: raresOwned,   setTotal: raresTotal   } = useSelector( ({inventory}) => inventory.set[setId].rare);\r\n\r\n    // Track change in win rate input\r\n    useEffect(() => {\r\n\r\n        // Wait for user to stop typing\r\n        const timeoutid = setTimeout( () => {\r\n            setWinRate(debouncedWinRate);\r\n            window.localStorage.setItem('draftWinRate', debouncedWinRate);\r\n        }, 500);\r\n\r\n        // Cleanup function to stop timer\r\n        return () => clearTimeout(timeoutid);\r\n    }, [debouncedWinRate])\r\n\r\n    // Track change in new rares picked\r\n    useEffect(() => {\r\n\r\n         // Wait for user to stop typing\r\n         const timeoutid = setTimeout( () => {\r\n            setRaresPicked(debouncedRaresPicked);\r\n            window.localStorage.setItem('draftRaresPicked', debouncedRaresPicked);\r\n        }, 500);\r\n\r\n        // Cleanup function to stop timer\r\n        return () => clearTimeout(timeoutid);\r\n    }, [debouncedRaresPicked]);\r\n\r\n    // Track change in new mythics picked\r\n    useEffect(() => {\r\n\r\n        // Wait for user to stop typing\r\n        const timeoutid = setTimeout( () => {\r\n           setMythicsPicked(debouncedMythicsPicked);\r\n           window.localStorage.setItem('draftMythicsPicked',debouncedMythicsPicked);\r\n       }, 500);\r\n\r\n       // Cleanup function to stop timer\r\n       return () => clearTimeout(timeoutid);\r\n   }, [debouncedMythicsPicked]);\r\n\r\n    // Get the average gems/packs per draft\r\n    const { gems, packs: rewardPacks } = useDraft(draftType, winRate/100);\r\n\r\n    // Check if the set is not draftable (reminder: the collationId is the value for the booster pack of the set)\r\n    if (!setInfo[setId].collationId) {\r\n        const message = `${setInfo[setId].name} is not a draftable set`;\r\n        return (\r\n            <div id=\"notAvailable\">\r\n                <h2>{message}</h2>\r\n            </div>\r\n        );\r\n    }\r\n    // Calculate number of drafts required to complete rare/mythic collection for this set\r\n    const rareDraftsNeeded = draftsNeeded(setId, \"rare\", raresOwned, raresTotal, raresPicked, rewardPacks, ownedBoosters);\r\n    const mythicDraftsNeeded = draftsNeeded(setId, \"mythic\", mythicsOwned, mythicsTotal, mythicsPicked, rewardPacks, ownedBoosters);\r\n\r\n    // Calculate cost of drafts (include gems returned)\r\n\r\n    // Default is for traditional or premier\r\n    let rareCost =   { gold: rareDraftsNeeded*10000, gems: rareDraftsNeeded*1500 },\r\n        mythicCost = { gold: mythicDraftsNeeded*10000, gems: mythicDraftsNeeded*1500 };\r\n\r\n    if (draftType === \"quick\") {\r\n        rareCost.gold = (rareCost.gold / 2);\r\n        rareCost.gems = (rareCost.gems / 2);\r\n        mythicCost.gold = (mythicCost.gold / 2);\r\n        mythicCost.gems = (mythicCost.gems / 2);\r\n    }\r\n\r\n    const totalRareGemReward = Math.floor(rareDraftsNeeded * gems).toLocaleString();\r\n    const totalMythicGemReward = Math.floor(mythicDraftsNeeded * gems).toLocaleString();\r\n\r\n    // Callback for CustomDropdown\r\n    function selectDraftType(item) {\r\n        setDraftType(item);\r\n        window.localStorage.setItem('preferredDraftType', item);\r\n    }\r\n    // Dropdown selects draft type\r\n    const renderDropDown = (\r\n        <div className=\"drafttype-dropdown\">\r\n            {/* Dropdown menu */}\r\n            <label>Draft Type: </label>\r\n            <CustomDropdown \r\n                items={['quick', 'premier', 'traditional']} key={draftType} ariaLabel=\"Select Draft Type\"\r\n                firstSelection={draftType} selectfn={selectDraftType} \r\n            />\r\n        </div>\r\n    );\r\n    // Validation function for winRate that will keep the input between 0 and 100\r\n    function checkWinRate(value){\r\n        let valueNum = value;\r\n        if ( valueNum > 100 ) {\r\n            valueNum = 100;\r\n        } \r\n        if ( valueNum < 0 ) {\r\n            valueNum = 0;\r\n        }\r\n        return valueNum;\r\n    }\r\n\r\n    // Validation function for Rare and mythic Cards Picked during drafts. Prevents negative numbers and sets to 0.\r\n    function checkCardsPicked(value) {\r\n        let valueNum = value;\r\n        if ( valueNum < 0 ) {\r\n            valueNum = 0;\r\n        }\r\n        return valueNum;\r\n    }\r\n\r\n    // Input selects estimated win percentage\r\n    const renderWinRate = (\r\n        <div>\r\n            <label htmlFor=\"winRate\">Win Rate: </label>\r\n            <input\r\n                type=\"number\" name=\"winRate\" id=\"winRate\" min=\"0\" max=\"100\" value={debouncedWinRate}\r\n                onChange={(e) => setDebouncedWinRate(checkWinRate(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n    \r\n    // Input for average number of new rares picked during draft\r\n    const renderRaresPickedInput = (\r\n        <div>\r\n            <label htmlFor=\"raresPicked\">Rares: </label>\r\n            <input\r\n                type=\"number\" name=\"raresPicked\" id=\"raresPicked\" min=\"0\" max=\"10\" step=\"0.1\" value={debouncedRaresPicked}\r\n                onChange={(e) => setDebouncedRaresPicked(checkCardsPicked(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    // Input for average number of new mythics picked during draft\r\n    const renderMythicsPickedInput = (\r\n        <div>\r\n            <label htmlFor=\"mythicsPicked\">Mythics: </label>\r\n            <input\r\n                type=\"number\" name=\"mythicsPicked\" id=\"mythicsPicked\" min=\"0\" max=\"10\" step=\"0.1\" value={debouncedMythicsPicked}\r\n                onChange={(e) => setDebouncedMythicsPicked(checkCardsPicked(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    const renderOutput = (\r\n        <div>\r\n            <hr />\r\n            <h3>Results:</h3>\r\n            <div className=\"draftsRequired\">\r\n                <div className=\"rares\">\r\n                    <h4>Collect All Rares: <span className=\"resultNumber\">{rareDraftsNeeded} Drafts</span></h4>\r\n                    <p>Cost: \r\n                        <img src={gold_img} alt=\"gold\" className=\"goldImg\"/> {(rareCost.gold).toLocaleString()} <span className=\"slash\">/</span>  \r\n                        <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {(rareCost.gems).toLocaleString()}\r\n                    </p>\r\n                    <p>\r\n                        Rewards: <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {totalRareGemReward} &#38; {Math.floor(rewardPacks * rareDraftsNeeded)} Packs\r\n                    </p>\r\n                </div>\r\n                <div className=\"mythics\">\r\n                    <h4>Collect All Mythics: <span className=\"resultNumber\">{mythicDraftsNeeded} Drafts</span></h4>\r\n                    <p>Cost: \r\n                        <img src={gold_img} alt=\"gold\" className=\"goldImg\"/> {(mythicCost.gold).toLocaleString()} <span className=\"slash\">/</span> \r\n                        <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {(mythicCost.gems).toLocaleString()}\r\n                    </p>\r\n                    <p>Rewards: <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {totalMythicGemReward} &#38; {Math.floor(rewardPacks * mythicDraftsNeeded)} Packs </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div id=\"draftsCalculator\">\r\n            <h3>Calculator Options \r\n                <a \r\n                href=\"/help?openSection=usingDraftCalculator#usingDraftCalculator\"\r\n                target=\"_blank\">\r\n                    <i className=\"info circle icon\"></i>\r\n                </a>\r\n            </h3>\r\n            <div className=\"top\">\r\n                <div className=\"typeAndWinRate\">\r\n                    {renderDropDown}\r\n                    {renderWinRate}\r\n                </div>\r\n                <p>New Cards Picked:</p>\r\n                <div className=\"cardsPicked\">\r\n                    {renderRaresPickedInput}\r\n                    {renderMythicsPickedInput}\r\n\r\n                </div>\r\n                <p>Packs Owned: {ownedBoosters}</p>\r\n            </div>\r\n            {renderOutput}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DraftsCalculator;\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Helper function to stop React from rerendering continuously upon window resize\r\n */\r\nfunction debounce(func, delay) {\r\n    let timer;\r\n    return (() => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null;\r\n            func.apply(this, arguments);\r\n        }, delay);\r\n    });\r\n}\r\n\r\n/**\r\n * Custom hook that returns the width of the current window upon resizing\r\n * @returns Width of current window\r\n */\r\nexport default function useResizeWidth() {\r\n    // Use local state to track window size\r\n    const [size, setSize] = useState({ width: window.innerWidth });\r\n\r\n    // useEffect adds event listener for window resize\r\n    useEffect(() => {\r\n        const debouncedResize = debounce(() => {\r\n            setSize({ width: window.innerWidth });\r\n        }, 100);\r\n\r\n        window.addEventListener('resize', debouncedResize);\r\n\r\n        // Clean up\r\n        return (() => { window.removeEventListener('resize', debouncedResize) });\r\n    }, []);\r\n\r\n    // Return new width on window resize\r\n    return size.width;\r\n}","import React, { useCallback, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Modal from '../Templates/Modal';\r\nimport { showCardModal, setCardModalContent } from '../../actions';\r\nimport useResizeWidth from '../../hooks/useResizeWidth';\r\nimport '../../css/CardModal.css';\r\n\r\nfunction CardModal() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Determine whether modal should currently be shown\r\n    const show = useSelector(state => state.modal.showCardModal);\r\n\r\n    // Destructuring from redux gets dicey, so these look kind of silly\r\n    const { index, imgSide } = useSelector(({ modal: {cardContent: content} }) => {\r\n        if (content)\r\n            return { index: content.index, imgSide: content.imgSide };\r\n\r\n        // Initial render default values\r\n        else\r\n            return { index: 0, imgSide: true };\r\n    });\r\n\r\n    const { img, imgLength } = useSelector(({ displayOptions: {imageList} }) => {\r\n        if (imageList)\r\n            return { img: imageList[index], imgLength: imageList.length };\r\n\r\n        // Initial render default values\r\n        else\r\n            return { img: null, imgLength: 0 };\r\n    });\r\n   \r\n    /**\r\n     * Move left an image in the modal when possible\r\n     */\r\n    const goLeft = useCallback(() => {\r\n        if (index > 0) {\r\n            dispatch(setCardModalContent({ index: index - 1, imgSide: true }));\r\n        }\r\n    }, [dispatch, index]);\r\n\r\n    /**\r\n     * Move right an image in the modal when possible\r\n     */\r\n    const goRight = useCallback(() => {\r\n        if (index < imgLength-1) {\r\n            dispatch(setCardModalContent({ index: index + 1, imgSide: true }));\r\n        }\r\n    }, [dispatch, index, imgLength]);\r\n\r\n    /**\r\n     * Flip card in modal.\r\n     */\r\n    const flipCard = useCallback(() => {\r\n\r\n        if (img.back) {\r\n\r\n            // Keep same card, but flip to other side\r\n            dispatch(setCardModalContent({ index, imgSide: !imgSide }));\r\n    \r\n            // Set animation for flipping action on card\r\n            imgRef.current.style.transition = \"1s\";\r\n    \r\n            // Determine which animation to show\r\n            const sideBoolean = flipRef.current.style.animation.includes(\"turning\");\r\n    \r\n            // Animate flip button\r\n            if (sideBoolean)\r\n                flipRef.current.style.animation = \"turned .6s linear\";\r\n            else\r\n                flipRef.current.style.animation = \"turning .6s linear\";\r\n    \r\n            // Clear animation after short delay\r\n            setTimeout(() => {\r\n                imgRef.current.style.transition = \"0s\";\r\n            }, 100);\r\n        }\r\n\r\n    }, [dispatch, imgSide, index, img]);\r\n\r\n    // Reference DOM\r\n    const prevRef = useRef(null);\r\n    const nextRef = useRef(null);\r\n    const imgRef  = useRef(null);\r\n    const flipRef = useRef(null);\r\n\r\n    /* Hooks need to be called before checking show, so that they're not called conditionally */\r\n\r\n    const width = useResizeWidth();\r\n    \r\n    // Return nothing when modal not shown or if screensize too small\r\n    if (!show || width < 527) {\r\n        return null;\r\n    }\r\n\r\n    // Basic button classes for semantic ui. Additional class added when button disabled\r\n    const BUTTON_CLASS = \"massive basic ui icon button\";\r\n\r\n    // Close modal button\r\n    const exit = (\r\n        <button\r\n            className={`exit ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"close icon\"/>\r\n        </button>\r\n    );\r\n\r\n    // \"Go to previous card\" button to be rendered inside modal\r\n    const prev = (\r\n        <button\r\n            aria-label=\"Previous Card\" title=\"Previous Card\" aria-keyshortcuts=\"ArrowLeft\"\r\n            ref={prevRef} disabled={index <= 0}\r\n            // Update image to display if possible\r\n            onClick={() => {\r\n                \r\n                // Move left\r\n                goLeft();\r\n\r\n                // Clear focus after going to next image\r\n                prevRef.current.blur();\r\n            }}\r\n            // Add \"disabled\" to class if not clickable (first image in list)\r\n            className={index > 0 ? BUTTON_CLASS : `disabled ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"chevron left icon\"></i>\r\n        </button>\r\n    );\r\n\r\n    // \"Go to next card\" button to be rendered inside modal\r\n    const next = (\r\n        <button\r\n        aria-label=\"Next Card\" title=\"Next Card\" aria-keyshortcuts=\"ArrowRight\"\r\n        ref={nextRef} disabled={index >= imgLength-1}\r\n            // Update image to display if possible\r\n            onClick={() => {\r\n\r\n                // Move right\r\n                goRight();\r\n\r\n                // Clear focus after going to next image\r\n                nextRef.current.blur();\r\n            }}\r\n            // Add \"disabled\" to class if not clickable (first image in list)\r\n            className={index < imgLength-1 ? BUTTON_CLASS : `disabled ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"chevron right icon\"></i>\r\n        </button>\r\n    );\r\n\r\n    // Only double-sided cards will have two images, otherwise create one if the image is initialized\r\n    let cardImage = <img src={img.front} alt=\"modal card\"/>;\r\n    let flipButton = null; // Regular cards don't have a flip button\r\n\r\n    // Flip button for double-sided cards\r\n    if (img.back) {\r\n\r\n        flipButton = (\r\n            <button\r\n                aria-label=\"Flip Card\" title=\"Flip Card\" aria-keyshortcuts=\"Space\"\r\n                className=\"circular ui icon button flipButton\"\r\n                onClick={(event) => {\r\n\r\n                    // Prevent any additional actions when clicking over image\r\n                    event.stopPropagation();\r\n\r\n                    // Keep same card, but flip to other side\r\n                    flipCard();\r\n                }}\r\n            >\r\n                <i className=\"undo icon\" id=\"flipButton\" ref={flipRef} />\r\n            </button>\r\n        );\r\n\r\n        // One image will be hidden\r\n        cardImage = (\r\n\r\n            // Add flipped class when back image shown\r\n            <div id=\"modalImage\" className={imgSide? \"\" : \"flipped\"} ref={imgRef} >\r\n                <img src={img.front} alt=\"modal card front\" className=\"cardImg\" />\r\n                <img src={img.back}  alt=\"modal card back\"  className=\"backside\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Compose all modal content\r\n    const renderedContent =\r\n    <>\r\n        {/* Exit button */}\r\n        <div\r\n            className=\"modalClose\"\r\n            onClick={() => dispatch(showCardModal(false))}\r\n        >\r\n            {exit}\r\n        </div>\r\n\r\n        <div className=\"modalContent\">\r\n            \r\n            {/* Previous button */}\r\n            <div className=\"backButton\">\r\n                {prev}\r\n            </div>\r\n\r\n            {/* Current card image and flip button */}\r\n            <div className=\"cardImage\">\r\n                {cardImage}\r\n                {flipButton}\r\n            </div>\r\n\r\n            {/* Next button */}\r\n            <div className=\"forwardButton\">\r\n                {next}\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n    // Create keyEvents Object to be passed to Modal; set key and function\r\n    const keyEvents = [\r\n\r\n        // Left Arrow pressed --> go left (-1 to index unless at start)\r\n        { keys: [37], keyFunction: goLeft },\r\n\r\n        // Right Arrow pressed --> go right (+1 to index unless at end)\r\n        { keys: [39], keyFunction: goRight },\r\n\r\n        // Space bar pressed --> Flip card if possible\r\n        { keys: [32], keyFunction: flipCard }\r\n    ];\r\n\r\n    // Render Modal\r\n    return (\r\n        <Modal content={renderedContent} keyEvents={keyEvents} show={show} setShow={(val) => dispatch(showCardModal(val))}/>\r\n    );\r\n}\r\n\r\nexport default CardModal;","import React from 'react';\r\n\r\nimport U from '../../images/color_imgs/U.svg';\r\nimport G from '../../images/color_imgs/G.svg';\r\nimport '../../css/PageNotFound.css';\r\n\r\nfunction SetNotFound() {\r\n    return (\r\n        <div className=\"pageNotFound\">\r\n            <img src={U} alt=\"Blue\" />\r\n            <h1>404 Set Not Found</h1>\r\n            <img src={G} alt=\"Green\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetNotFound;","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport CardList from '../All/CardList';\r\nimport RarityCollectionItem from '../All/RarityCollectionItem';\r\nimport SetDetailsMenu from './SetDetailsMenu';\r\nimport DisplayOptions from './DisplayOptions';\r\nimport PacksCalculator from './PacksCalculator';\r\nimport DraftsCalculator from './DraftsCalculator';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport CardModal from './CardModal';\r\nimport SetNotFound from '../All/SetNotFound.js';\r\nimport useResizeWidth from '../../hooks/useResizeWidth';\r\nimport '../../css/SetDetails.css';\r\n\r\nfunction SetDetails() {\r\n\r\n    // Always start from the top of a set\r\n    useEffect(() => {\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n    }, []);\r\n\r\n    // Get set Id from url\r\n    const { setId } = useParams();\r\n\r\n    // Get current screen width\r\n    const width = useResizeWidth();\r\n\r\n    // Get active tab from redux\r\n    const activeTab = useSelector(state => state.displayOptions.activeTab);\r\n\r\n    /*\r\n     * Calculate totals from redux state \r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set && set[setId]) {\r\n            // Sum the total cards owned\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].ownedTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set && set[setId]) {\r\n            // Sum the total cards in the set\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].setTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    // Check if set exists\r\n    if (!setInfo[setId]) {\r\n        \r\n        // Return error page if set doesn't exist\r\n        return <SetNotFound/>;\r\n    }\r\n\r\n    // Calculate and round percent owned\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n    const setName = setInfo[setId].name;\r\n\r\n    // Determine active tab and resulting component to display\r\n    const activeTabComponent = (() => {\r\n\r\n        switch (activeTab) {\r\n            case 'Card Filters':\r\n                return <DisplayOptions />;\r\n            case 'Packs':\r\n                return <PacksCalculator />;\r\n            case 'Drafts':\r\n                return <DraftsCalculator />;\r\n            default:\r\n                return null;\r\n        }\r\n    })();\r\n\r\n    // Break up set details and display options at small width\r\n    let setDetailsColumns = \"six\";\r\n    let displayOptionsColumns = \"ten\";\r\n\r\n    if (width < 740) {\r\n        setDetailsColumns = \"sixteen\";\r\n        displayOptionsColumns = \"sixteen\";\r\n    }\r\n\r\n    let detailsHeader = <div className=\"ui center aligned header\">{setName}</div>\r\n    if ( setInfo[setId].logo ) {\r\n        detailsHeader = <div className=\"ui center aligned header\">\r\n                <img src={setInfo[setId].logo} alt={setName} aria-label={setName} title={setName}/>\r\n            </div>\r\n    }\r\n    return (<>\r\n        {/* Card modal is only shown when a card is clicked */}\r\n        <CardModal/>\r\n\r\n        <div className=\"ui grid container\" id=\"setDetailsSpacer\">\r\n\r\n            {/* Set Details */}\r\n            <div className={`${setDetailsColumns} wide column`}>\r\n                {detailsHeader}\r\n                <div className=\"ui center aligned sub header\">\r\n                    Set Progress:\r\n                    &nbsp; &nbsp; &nbsp; {/* Spacers */}\r\n                    <span>{ownedTotal} / {setTotal} ({percentOwned}%)</span>\r\n                </div>\r\n\r\n                <div className=\"ui middle aligned list\">\r\n                    <RarityCollectionItem setId={setId} rarity=\"mythic\" />                    \r\n                    <RarityCollectionItem setId={setId} rarity=\"rare\" />\r\n                    <RarityCollectionItem setId={setId} rarity=\"uncommon\" />\r\n                    <RarityCollectionItem setId={setId} rarity=\"common\"/>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display options for SetDetails */}\r\n            <div className={`${displayOptionsColumns} wide column`}>\r\n                <SetDetailsMenu />\r\n                {activeTabComponent}\r\n            </div>\r\n        </div>\r\n        \r\n        <hr className=\"lineBreak\"/>\r\n\r\n        {/* Cards matching display options */}\r\n        <CardList setId={setId}/>\r\n    </>);\r\n    \r\n}\r\n\r\nexport default SetDetails;","import React, { useEffect, useRef } from 'react';\r\n\r\nimport '../../css/ProgressBar.css'\r\n\r\nfunction ProgressBar({percent, innerClass}) {\r\n    // Make a reference to the inner portion of the progress bar\r\n    const innerRef = useRef();\r\n\r\n    useEffect(()=> {\r\n        innerRef.current.style.width = `${percent}%`;\r\n\r\n    },[percent])\r\n\r\n    return (\r\n        <div className=\"progress-outer\">\r\n            <div className={`progress-inner ${innerClass}`} ref ={innerRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ProgressBar from './ProgressBar';\r\nimport '../../css/RarityCollectionItem.css';\r\n\r\n/**\r\n * Component that contains details about how many cards are owned from a specific set of a specific rarity\r\n * @param {*} setId\r\n * @param {*} rarity\r\n */\r\nfunction RarityCollectionItem({ setId, rarity }) {\r\n\r\n    /*\r\n     * Extract multiple values from redux state\r\n     * - Multiple calls to useSelector used to avoid needing to memoize redux state\r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].ownedTotal;\r\n        \r\n        // else no cards found\r\n        return 0;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].setTotal;\r\n    });\r\n\r\n    // Calculate percent of cards owned (to one decimal) from specified set of specified rarity\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n\r\n    let symbol = setId;\r\n    // Replace some set symbols with another (e.g. give all Historic Anthologies the HA1 symbol)\r\n    if (setId.slice(0, 2) === 'ha') {\r\n        symbol = 'ha1'\r\n    }\r\n    if (setId.length === 4 && setId[0] === 'y') {\r\n        symbol = 'y22'\r\n    }\r\n\r\n    // If there are no cards of this rarity, don't show a progress bar for this rarity\r\n    if (setTotal === 0) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className=\"item \" id=\"collectionItem\" >\r\n            <div className=\"rarityContainer\">\r\n\r\n                <div className=\"rarityText\">\r\n                    <i className={`ss ss-${symbol} ss-${rarity} ss-fw mtgIcon`}/>\r\n                    &nbsp; {/* Force a non-CSS space between icon and text */}\r\n                    {rarity}\r\n                </div>\r\n\r\n                <div className=\"rarityNumber\">\r\n                    <span>{`${ownedTotal} / ${setTotal} (${percentOwned}%)`}</span>\r\n                </div>\r\n            </div>\r\n            <ProgressBar percent={percentOwned} innerClass={rarity}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RarityCollectionItem;"],"sourceRoot":""}