{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","components/DeckBuilder/SelectSet.js","components/DeckBuilder/AdvancedOptions.js","components/DeckBuilder/AddBasicsButton.js","components/DeckBuilder/DBCardFilters.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/DeckBuilder/ExportDeck.js","data/getDeckCard.js","components/DeckBuilder/ImportDeck.js","components/DeckBuilder/ImportExportModal.js","components/DeckBuilder/DBDeckOptions.js","components/DeckBuilder/DBSidebar.js","components/DeckBuilder/DeckHeader.js","components/DeckBuilder/DBDeck.js","components/DeckBuilder/DBSideboard.js","components/DeckBuilder/LimitedSideboard.js","components/DeckBuilder/DeckBuilder.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","SelectSet","dispatch","useDispatch","reduxSets","useSelector","displayOptions","set","resetCount","options","setId","setInfo","newObj","text","val","className","MultiSelect","useValForSelected","noneSelectedText","selectedFn","sets","selectSet","initialSelected","AdvancedOptions","useState","modalOpen","setModalOpen","rarity","showCards","booster","cmcs","searchType","cardTypes","inUse","includes","modalContent","onClick","SearchBar","RarityButtons","header","ColorCheckboxes","NumberOwnedDropdown","BoosterDropdown","CMCDropdowns","CardTypeDropdown","Reset","renderedModal","Modal","content","show","setShow","title","AddBasicsButton","deckBuilder","addBasics","addType","addBasicsClass","e","setAddType","toggleAddBasics","DBCardFilters","advanced","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","ExportDeck","deckMap","sideboardMap","commander","companion","saveClipboard","setSaveClipboard","saveFile","setSaveFile","useMemo","deckOutput","deck_sideboardOutput","commander_companionOutput","inputMap","faceSeparator","entries","ids","substring","indexOf","card","test","collector_number","copies","toUpperCase","a","deckString","suggestedName","Date","toISOString","replace","types","description","accept","window","showSaveFilePicker","fileLocation","createWritable","write","close","id","navigator","clipboard","writeText","getDeckCard","matches","toLowerCase","arenaCards","card_faces","ImportDeck","importedText","setImportedText","cardCollection","inventory","pickCardsFromMatches","number","temp","type_line","standardSets","match","numOwned","arenaId","sort","b","numNeeded","getCards","deckStringsArray","regex4","regex3","regex2","sectionCards","line","cards","parseInt","showOpenFilePicker","file","getFile","onChange","target","spellCheck","readText","lines","trim","split","deckStrings","sideboardStrings","deck","sideboard","createSections","deckCardsToAdd","sideboardCardsToAdd","concat","setDeck","setSideboard","changeCommander","changeCompanion","ImportExportModal","isImport","setIsImport","DBDeckOptions","deckType","labels","renderGameType","CustomDropdown","items","firstSelection","selectfn","item","selectDeckType","ariaLabel","clearButton","flat","htmlFor","DBSidebar","onDragEnter","setCurrentDragOver","DeckHeader","deckOrSideboard","useEffect","sideboardCount","deckCount","landCount","partialLandCount","creatureCount","nonCreatureCount","sides","frontType","backtype","partialLandSpan","toggle","event","stopPropagation","addToggle","tabIndex","onKeyDown","onMouseDown","role","aria-checked","aria-label","checked","readOnly","setComType","setComButton","buttonText","style","filter","comButtons","DBDeck","currentDragOver","renderCards","addedToDeck","map","column","colClass","section","col","draggable","onDragOver","preventDefault","onDrop","dropCard","row","j","cardStyle","legalities","boxShadow","borderRadius","transform","zIndex","HoverPreview","imgs","src","front","alt","onDragStart","setDragCard","onDragEnd","removeCardFromDeck","addCardToSideboard","commander_companion","DBSideboard","open","setOpen","renderSBCards","sbCounter","removeCardFromSideboard","iconClass","sideboardClass","showButton","SideboardColumn","cardArray","colors","searchTerm","cmc","rarityOptions","option","searchCardTypes","cardType","searchcmc","min","max","renderColumn","searchOptions","color","term","advancedSearchType","cardList","findCards","addCardToDeck","moveToDeck","LimitedSideboard","limitedSort","DeckBuilder","cardListRef","useRef","dbCardList","CardList","scrollingParent","ref","mouseHeight","clientY","current","overflowY","marginRight","document","onmousemove","height","offsetHeight","onmouseup","MoveSlider"],"mappings":"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","file":"static/js/4.5ad63e54.chunk.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport MultiSelect from '../Templates/MultiSelect';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport { selectSet } from '../../actions';\r\nimport '../../css/SelectSet.css';\r\n\r\n/**\r\n * Uses MultiSelect to create a multiSelectible dropdown for selecting sets to search\r\n * @returns JSX \r\n */\r\nfunction SelectSet() {\r\n    const dispatch = useDispatch();\r\n    \r\n    // Get current state of sets selected from Redux\r\n    const reduxSets = useSelector(state => state.displayOptions.set);\r\n    // Use Reset count as a key to rerender component when the reset button is hit\r\n    const key = useSelector(state => state.displayOptions.resetCount);   \r\n\r\n    // Create the options for the multiSelect menu\r\n    // Each option is an object with text and val properties\r\n    let options = [];\r\n    for (const setId in setInfo) {\r\n        let newObj = {};\r\n        newObj.text = setInfo[setId].name;\r\n        newObj.val = setId;\r\n        options.push(newObj);\r\n    }\r\n\r\n    return (\r\n        <div className=\"selectSet\">\r\n            <label >Select Set(s): </label>\r\n            <MultiSelect \r\n                options={options} \r\n                useValForSelected noneSelectedText=\"All Sets\"\r\n                selectedFn={(sets) => dispatch(selectSet(sets))}\r\n                initialSelected = {reduxSets}\r\n                key={key}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectSet;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Modal from '../Templates/Modal';\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport ColorCheckboxes from '../SetDetails/ColorCheckboxes';\r\nimport RarityButtons from '../SetDetails/RarityButtons';\r\nimport NumberOwnedDropdown from '../SetDetails/NumberOwnedDropdown';\r\nimport BoosterDropdown from '../SetDetails/BoosterDropdown';\r\nimport CMCDropdowns from '../SetDetails/CMCDropdowns';\r\nimport SelectSet from './SelectSet';\r\nimport CardTypeDropdown from '../SetDetails/CardTypeDropdown';\r\nimport Reset from '../SetDetails/Reset';\r\nimport '../../css/AdvancedOptions.css';\r\n\r\n/**\r\n * The advanced options button and its modal\r\n * @returns JSX for the button and modal\r\n */\r\nfunction AdvancedOptions() {\r\n\r\n    // Advanced options modal is open/closed\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const { rarity, showCards, booster, set, cmcs, searchType, cardTypes} = useSelector(state => state.displayOptions);\r\n\r\n    // Boolean for if advanced Options are being used\r\n    let inUse = false;\r\n    // Check if any of the advanced Options are not their defaults\r\n    if (showCards !== 'Show All Cards' || booster !=='Show All Cards' || set.length > 0 || cardTypes.length > 0 || searchType !== null ||\r\n        Object.values(rarity).includes(true) || cmcs.length > 0\r\n    ) {\r\n        inUse = true;\r\n    }\r\n\r\n    // JSX in the modal --> only viewable if modalOpen is true\r\n    const modalContent = ( \r\n        <div className=\"advancedOptionsModal darkMode\">\r\n            <div className=\"closeModalButton\">\r\n                <button onClick={() => setModalOpen(!modalOpen)}><i className=\"close icon\"></i></button>\r\n\r\n            </div>\r\n            <div>\r\n                <SearchBar />\r\n                <div className=\"advancedOptionsSection\">\r\n                    <RarityButtons header=\"Select Rarity/Rarities to Show:\"  />\r\n                    <ColorCheckboxes header=\"Select Color/Colors to Show:\" />\r\n                </div>\r\n                <div className=\"advancedOptionsSection\">\r\n                    <NumberOwnedDropdown header=\"Number You Own:\"/>\r\n                    <BoosterDropdown header=\"In Booster Packs?\"  />\r\n                    <CMCDropdowns header=\"Select Mana Costs:\"/>\r\n                </div>\r\n                <div className=\"advancedOptionsSection\">\r\n                    <SelectSet />\r\n                    <CardTypeDropdown />\r\n                    <Reset />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n    // If moddalOpen is true --> render the modal, false --> null\r\n    const renderedModal = modalOpen ? <Modal content={modalContent} show={modalOpen} setShow={setModalOpen} /> : null;\r\n\r\n    return (\r\n        <> \r\n        {/* Add inUse flag to class if some option ONLY in advanced options is being used */}\r\n            <button className={inUse ? 'advancedOptionsButton inUse': 'advancedOptionsButton'} onClick={() => setModalOpen(!modalOpen)}\r\n            title=\"Advanced Options\"\r\n            >\r\n                <i className=\"icon cogs\"></i>\r\n            </button>\r\n            {renderedModal}            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default AdvancedOptions;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { toggleAddBasics, setAddType } from '../../actions';\r\n\r\n// CSS for this component will be in DBCardFilters.css\r\n/**\r\n * The button that toggles adding basic lands to a deck\r\n * @returns JSX\r\n */\r\nfunction AddBasicsButton() {\r\n    const dispatch = useDispatch();\r\n    const { addBasics, addType } = useSelector(state => state.deckBuilder);\r\n\r\n    let addBasicsClass = \"addBasics\";\r\n    if (addBasics) addBasicsClass += \" active\";\r\n\r\n    return (\r\n        <button className={addBasicsClass}\r\n        onClick={(e)=> {\r\n\r\n            // Check if addType is either commander or companion\r\n            if (addType === \"commander\" || addType === \"companion\") {\r\n                dispatch(setAddType(\"deck\"));\r\n            }\r\n\r\n            dispatch(toggleAddBasics())\r\n        }}\r\n        >\r\n            Add Basic Lands\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default AddBasicsButton;","import React from 'react';\r\n\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport ColorCheckboxes from '../SetDetails/ColorCheckboxes';\r\nimport AdvancedOptions from './AdvancedOptions';\r\nimport Reset from '../SetDetails/Reset';\r\nimport AddBasicsButton from './AddBasicsButton';\r\nimport '../../css/DBCardFilters.css';\r\n\r\n/**\r\n * The Card filters for DBSidebar\r\n * @returns JSX for card filtering options\r\n */\r\nfunction DBCardFilters() {\r\n    return (\r\n        <div className=\"DBCardFilters\">\r\n            <SearchBar advanced={false}/>\r\n            <ColorCheckboxes header=\"Select Color/Colors to Show:\" />\r\n            <AddBasicsButton />\r\n            <div className=\"advancedAndReset\">\r\n                <AdvancedOptions />\r\n                <Reset />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBCardFilters;\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useState, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * The content in the export modal. Contains a preview of the exported deck, save to file button,\r\n * and copy to clipboard button.\r\n */\r\nfunction ExportDeck({ setModalOpen }) {\r\n\r\n    const { deckMap, sideboardMap, commander, companion } = useSelector(state => state.deckBuilder);\r\n\r\n    const [saveClipboard, setSaveClipboard] = useState(\"Copy to Clipboard\");\r\n    const [saveFile,      setSaveFile]      = useState(\"Save to File\");\r\n\r\n    /**\r\n     * Iteratively build deck string output\r\n     */\r\n    const toString = useMemo(() => {\r\n        let deckOutput = '';\r\n        \r\n        // Add deck\r\n        if (Object.keys(deckMap).length) {\r\n            deckOutput += 'Deck\\n';\r\n\r\n            deckOutput += deck_sideboardOutput(deckMap);\r\n        }\r\n\r\n        // Add sideboard\r\n        if (Object.keys(sideboardMap).length) {\r\n            deckOutput += '\\nSideboard\\n';\r\n\r\n            deckOutput += deck_sideboardOutput(sideboardMap);\r\n        }\r\n\r\n        // Add commander\r\n        if (commander) {\r\n            deckOutput += '\\nCommander\\n';\r\n            deckOutput += commander_companionOutput(commander);\r\n        }\r\n\r\n        // Add companion\r\n        if (companion) {\r\n            deckOutput += '\\nCompanion\\n';\r\n            deckOutput += commander_companionOutput(companion);\r\n        }\r\n\r\n        return deckOutput;\r\n    }, [commander, companion, deckMap, sideboardMap]);\r\n\r\n    /**\r\n     * Gets string for deckMap and sideboardMap\r\n     */\r\n    function deck_sideboardOutput(inputMap) {\r\n        const faceSeparator = \" // \";\r\n\r\n        let deckOutput = '';\r\n\r\n        // Iterate through each card name in imputMap\r\n        for (let [name, ids] of Object.entries(inputMap)) {\r\n\r\n            // Only use front face if double-sided\r\n            if (name.includes(faceSeparator)) {\r\n                name = name.substring(0, name.indexOf(faceSeparator));\r\n            }\r\n            \r\n            // Iterate through each arenaId of that card name and add it to deckOutput string\r\n            for (const card of Object.values(ids)) {\r\n\r\n                // Only list number and name for sets with 4+ letter set codes, or collector numbers\r\n                // with letters, because the game doesn't import them correctly\r\n                if (card.set.length > 3 || /.*[A-Za-z].*/.test(card.collector_number)) {\r\n\r\n                    // Ex output: 4 Llanowar Elves\r\n                    deckOutput += `${card.copies} ${name}\\n`;\r\n                }\r\n\r\n                else {\r\n                    \r\n                    // Ex output: 4 Clearwater Pathway (ZNR) 260\r\n                    deckOutput += `${card.copies} ${name} (${card.set.toUpperCase()}) ${card.collector_number}\\n`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return deckOutput;\r\n    }\r\n\r\n    /**\r\n     * Get string for commander and/or companion\r\n     */\r\n    function commander_companionOutput(card) {\r\n\r\n        let deckOutput = '';\r\n\r\n        if (card.set.length > 3 || /.*[A-Za-z].*/.test(card.collector_number)) {\r\n            deckOutput += `1 ${card.name}\\n`;\r\n        }\r\n\r\n        else {\r\n            deckOutput += `1 ${card.name} (${card.set.toUpperCase()}) ${card.collector_number}\\n`;\r\n        }\r\n\r\n        return deckOutput;\r\n    }\r\n\r\n    /**\r\n     * Copies deck to clipboard\r\n     */\r\n    function toClipboard() {\r\n        const deckString = toString;\r\n\r\n        // Write deck to clipboard\r\n        navigator.clipboard.writeText(deckString).then(() => {\r\n\r\n            // Update button text\r\n            setSaveClipboard(\"Copied!\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves deck to txt file\r\n     */\r\n    async function toFile() {\r\n\r\n        try {\r\n            // Get deck as a string\r\n            const deckString = toString;\r\n    \r\n            // Get location to save file from user\r\n            const options = {\r\n                suggestedName: `deck_${new Date().toISOString().replace(/\\..+/g, \"\").replace(/[T:-]/g, \"\")}.txt`,\r\n                types: [{ description: 'Text Files', accept: {'text/plain': ['.txt']} }]\r\n            };\r\n            const fileLocation = await window.showSaveFilePicker(options);\r\n    \r\n            // Create a FileSystemWritableFileStream to write to.\r\n            const writable = await fileLocation.createWritable();\r\n    \r\n            // Write the deckString to the stream.\r\n            await writable.write(deckString);\r\n    \r\n            // Close the file and write the contents to disk.\r\n            await writable.close();\r\n    \r\n            // Update button text\r\n            setSaveFile(\"Saved!\");\r\n            \r\n        } catch (error) {\r\n\r\n            // Update button text\r\n            setSaveFile(\"Did not Save\");\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"importExportContent\">\r\n            <div className=\"spacedModalHeader\">\r\n\r\n                <div className=\"invisible closeButtonSpacer\"/>\r\n\r\n                <h1>Import Deck</h1>\r\n\r\n                <div className=\"closeModalButton\">\r\n                    <button onClick={() => setModalOpen(false)}><i className=\"close icon\"/></button>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Preview:</h3>\r\n            <p id=\"deckPreview\">{toString}</p>\r\n\r\n            <div id=\"fileOrClipboardButtons\">\r\n\r\n                <button onClick={toFile}>\r\n                    {saveFile}\r\n                </button>\r\n\r\n                <button onClick={toClipboard}\r\n                >\r\n                    {saveClipboard}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExportDeck;\r\n","import arenaCards from \"./arenaCards\";\r\n\r\n/**\r\n * Returns an array of cards matching the specified parameters. If name only is specified, the array contains all matching\r\n * cards (if multiple versions exist). If set and collector number are specified, then the array will contain one matching\r\n * card. Returns an empty array if no matches found.\r\n * \r\n * @param {string} name The card name (not case sensitive). Fallback for no match from set and collector_number.\r\n * @param {string} set (Optional) The three-letter set code for the card (not case sensitive).\r\n * @param {number} collector_number (Optional) The collector number for the specific card set.\r\n * @returns {array} An array of matching cards.\r\n */\r\nfunction getDeckCard(name, set=null, collector_number=null) {\r\n\r\n    // Matches to return. Global so getDeckCard and addCard have access\r\n    let matches = [];\r\n\r\n    // Convert name and set code to lowercase for searching\r\n    name = name.toLowerCase();\r\n    set = set ? set.toLowerCase() : null;\r\n    \r\n    if (typeof collector_number === \"number\") {\r\n        collector_number = collector_number.toString();\r\n    }\r\n\r\n    // Check if looking for specific card (set and collector_number specified)\r\n    if (set && collector_number) {\r\n\r\n        // Search allArenaCards array for a single match\r\n        for (const card of arenaCards) {\r\n            \r\n            // Find single matching card\r\n            if (card.set === set && card.collector_number === collector_number) {\r\n                \r\n                // Add card to matches\r\n                matches.push(card);\r\n\r\n                // Don't look for additional matches\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Looking for specific set, but no collector number known\r\n    else if (set) {\r\n\r\n        // Search allArenaCards array for a single match\r\n        for (const card of arenaCards) {\r\n            \r\n            // Find single matching card\r\n            if ( (card.name.toLowerCase() === name || (card.card_faces && card.card_faces[0].name.toLowerCase() === name))\r\n                && (card.set === set) )\r\n            {\r\n                // Add card to matches\r\n                matches.push(card);\r\n\r\n                // Don't look for additional matches\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Fallback search for all name matches (either set and collector number unspecified, or yielded no results)\r\n    if (matches.length === 0) {\r\n\r\n        // Search allArenaCards array for all name matches\r\n        for (const card of arenaCards) {\r\n            \r\n            // Check card name and check front side name if double-faced card\r\n            if ( card.name.toLowerCase() === name || (card.card_faces && card.card_faces[0].name.toLowerCase() === name) ) {\r\n                \r\n                // Add card to matches\r\n                matches.push(card);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return array of matching cards\r\n    return matches;\r\n}\r\n\r\nexport default getDeckCard;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport getDeckCard from '../../data/getDeckCard';\r\nimport { standardSets } from '../../data/setInfo';\r\nimport { setDeck, setSideboard, changeCommander, changeCompanion } from '../../actions';\r\n\r\n// If adding lands, unless specific card requested, add version of land from most recent set\r\nfunction ImportDeck({ setModalOpen }) {\r\n\r\n    const [importedText, setImportedText] = useState(\"\");\r\n\r\n    const cardCollection = useSelector(state => state.inventory.cardCollection);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function onSubmit() {\r\n        const { deck, sideboard, commander: [commander], companion: [companion] } = createSections();\r\n        \r\n        let deckCardsToAdd = [], sideboardCardsToAdd = [];\r\n\r\n        // Get array of deck cards to add\r\n        for (const { number, matches } of deck) {\r\n            deckCardsToAdd = deckCardsToAdd.concat(pickCardsFromMatches(number, matches));\r\n        }\r\n        \r\n        // Get array of sideboard cards to add\r\n        for (const { number, matches } of sideboard) {\r\n            sideboardCardsToAdd = sideboardCardsToAdd.concat(pickCardsFromMatches(number, matches));\r\n        }\r\n\r\n        // Update redux\r\n        dispatch(setDeck(deckCardsToAdd));\r\n        dispatch(setSideboard(sideboardCardsToAdd));\r\n        dispatch(changeCommander(commander));\r\n        dispatch(changeCompanion(companion));\r\n\r\n        // Close modal\r\n        setModalOpen(false);\r\n    }\r\n\r\n    /**\r\n     * Parses imported strings, finds matching cards, and returns those sections\r\n     */\r\n    function createSections() {\r\n\r\n        try {\r\n\r\n            // Splitting lines by \"\\r\\n\" or \"\\n\" (removing whitespace from beginning and end)\r\n            const lines = importedText.trim().split(/\\r?\\n/);\r\n\r\n            /* \r\n                Handles either all names sections: \"Deck\", \"Sideboard\", \"Commander\", & \"Companion\" \r\n                or all unnamed sections, and assumes deck is first, followed by sideboard\r\n            */\r\n            let deckStrings = [], sideboardStrings = [], commander = [], companion = [], deck = [], sideboard = [];\r\n\r\n            // Handles the start of sections, inner loops handle the sections themselves\r\n            for (let i=0; i<lines.length; i++) {\r\n                \r\n                // Normalize line by trimming excess space and converting to lowercase\r\n                let line = lines[i].toLowerCase().trim();\r\n\r\n                // Commander\r\n                if (line === \"commander\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n\r\n                    // Get the corresponding card for that line\r\n                    const temp = getCards([ lines[i].toLowerCase().trim() ]);\r\n                    commander = temp[0].matches;\r\n                }\r\n\r\n                // Companion\r\n                else if (line === \"companion\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n\r\n                    // Get the corresponding card for that line\r\n                    const temp = getCards([ lines[i].toLowerCase().trim() ]);\r\n                    companion = temp[0].matches;\r\n                }\r\n\r\n                // Deck\r\n                else if (line === \"deck\") {\r\n                        \r\n                    // Get following line\r\n                    i++;\r\n                    line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n\r\n                    // Add lines to deck until either an empty line or the end of lines is reached\r\n                    while (line !== \"\" && i !== lines.length) {\r\n\r\n                        // Add line to deck array\r\n                        deckStrings.push(line);\r\n\r\n                        // Get next line\r\n                        i++;\r\n                        line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                    }\r\n\r\n                    // Get the deck cards\r\n                    deck = getCards(deckStrings);\r\n                }\r\n\r\n                // Sideboard\r\n                else if (line === \"sideboard\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n                    line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n\r\n                    // Add lines to sideboard until either an empty line or the end of lines is reached\r\n                    while (line !== \"\" && i !== lines.length) {\r\n\r\n                        // Add line to sideboard array\r\n                        sideboardStrings.push(line);\r\n\r\n                        // Get next line\r\n                        i++;\r\n                        line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                    }\r\n\r\n                    // Get the sideboard cards\r\n                    sideboard = getCards(sideboardStrings);\r\n                }\r\n\r\n                // Skip empty lines\r\n                else if (line === \"\") {\r\n                    continue;\r\n                }\r\n\r\n                // Otherwise assume there's no header for this section\r\n                else {\r\n\r\n                    // First line with no header is treated as deck\r\n                    if (i === 0) {\r\n\r\n                        // Add lines to deck until either an empty line or the end of lines is reached\r\n                        while (line !== \"\" && i !== lines.length) {\r\n\r\n                            // Add line to deck array\r\n                            deckStrings.push(line);\r\n\r\n                            // Get next line\r\n                            i++;\r\n                            line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                        }\r\n\r\n                        // Get the deck cards (redefine if already exists)\r\n                        deck = getCards(deckStrings);\r\n                    }\r\n\r\n                    // If not first line, section with no header is treated as sideboard\r\n                    else {\r\n\r\n                        // Add lines to sideboard until either an empty line or the end of lines is reached\r\n                        while (line !== \"\" && i !== lines.length) {\r\n\r\n                            // Add line to sideboard array\r\n                            sideboardStrings.push(line);\r\n\r\n                            // Get next line\r\n                            i++;\r\n                            line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                        }\r\n\r\n                        // Get the sideboard cards\r\n                        sideboard = getCards(sideboardStrings);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return { deck, sideboard, commander, companion };\r\n\r\n        } catch (error) {\r\n\r\n            setImportedText(\"Sorry, there was an error importing that file.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempt to choose only owned cards from possible matches. If not enough copies are owned, chooses duplicates\r\n     * of most-owned version to make up the deficit.\r\n     * \r\n     * @param {number} number The number of requested copies of this card.\r\n     * @param {array} matches The possible cards to pick from. An array of card objects.\r\n     * @returns {array} An array of cards chosen from {matches} of length {number}. Preferentially picks cards that\r\n     * the user owns more copies of; will return only owned cards if possible.\r\n     */\r\n    function pickCardsFromMatches(number, matches) {\r\n\r\n        const temp = []; // Return array\r\n\r\n        // Return empty array when no matches found\r\n        if (number < 1 || matches.length === 0) {\r\n            // Do nothing here; return empty array\r\n        }\r\n\r\n        // If there's only one match, return array with {number} of requested cards\r\n        else if (matches.length === 1) {\r\n\r\n            // Push {number} of matches into return array\r\n            for (let i=0; i<number; i++) {\r\n                temp.push({ ...matches[0] });\r\n            }\r\n        }\r\n\r\n        // If a basic land is requested, but no specific land, use most recent set\r\n        else if (matches[0].type_line.toLowerCase().includes(\"basic\") && \r\n                 matches[0].type_line.toLowerCase().includes(\"land\"))\r\n        {\r\n            // Use first entry from standard sets to find the correct land to add\r\n            const [ card ] = getDeckCard(matches[0].name, standardSets[0]);\r\n\r\n            // Grab number requested of basic lands\r\n            for (let i=0; i<number; i++) {\r\n                temp.push(card);\r\n            }\r\n        }\r\n\r\n        // If there are multiple matches, determine how many copied the user has of each, sort list in descending\r\n        // order, and try to return cards the user already owns\r\n        else {\r\n\r\n            // Get the number of copies the user owns and add that property to each match\r\n            for (const match of matches) {\r\n\r\n                // Set to 0 if none owned\r\n                const numOwned = cardCollection && cardCollection[match.arenaId] ? cardCollection[match.arenaId]: 0;\r\n                match.numOwned = numOwned;\r\n            }\r\n\r\n            // Sort in descending order of number owned\r\n            matches.sort((a, b) => b.numOwned - a.numOwned);\r\n\r\n            // Add requested cards to temp if owned\r\n            for (const match of matches) {\r\n\r\n                // Get number still needed\r\n                const numNeeded = number - temp.length;\r\n\r\n                // Check if done\r\n                if (numNeeded <= 0) {\r\n                    break;\r\n                }\r\n\r\n                // Else see if more copies available\r\n                if (match.numOwned === 0) { // Sorted, so break at first instance of 0 copies\r\n                    break;\r\n                }\r\n\r\n                // Case where we have enough copies of this match to finish\r\n                if (match.numOwned >= numNeeded) {\r\n\r\n                    for(let i=0; i<numNeeded; i++) {\r\n                        temp.push(match);\r\n                    }\r\n\r\n                    // Done\r\n                    break;\r\n                }\r\n\r\n                // Case where we have DON'T have enough copies of this match to finish\r\n                // Add as many as possible, and move to next match\r\n                for(let i=0; i<match.numOwned; i++) {\r\n                    temp.push(match);\r\n                }\r\n            }\r\n\r\n            // Make up deficit with match user owns the most of (not enough copies owned)\r\n            const numNeeded = number - temp.length;\r\n            for(let i=0; i<numNeeded; i++) {\r\n                temp.push(matches[0]);\r\n            }\r\n        }\r\n\r\n        // Change some properties while importing\r\n        for (const card of temp) {\r\n            if (card.set.toLowerCase() === \"dar\") {\r\n                card.set = \"dom\";\r\n            }\r\n        }\r\n\r\n        // Return matching cards\r\n        return temp;\r\n    }\r\n\r\n    /**\r\n     * Takes an array of strings that describe cards for a deck (e.g. \"10 Forest (M20) 278\" or just \"10 Forest\")\r\n     * and returns an array of objects containing the number of cards requested (e.g. 10) and an array of matching\r\n     * card objects, \"matches\"\r\n     * - matches array contains only one card if set and collector number are specified and correct.\r\n     * - matches array may contain multiple cards when only number and name are specified, or if set and collector\r\n     * number yielded no results.\r\n     * \r\n     * @param {array} deckStringsArray The array of strings to parse\r\n     * @returns Array of objects. [ { number, matches: [] }, {...}, ... ]\r\n     * - number: The number of cards requested (zero for no matches).\r\n     * - matches: An array of matching cards (empty array for no matches).\r\n     */\r\n    function getCards(deckStringsArray) {\r\n\r\n        // Regex that parses number of cards, name, set, and collection_number\r\n        const regex4 = /(\\d+)\\s+(.+\\S)\\s+\\((\\w{3,4})\\)\\s+(\\d+)/;\r\n        \r\n        // Regex that parses number of cards, name, and set\r\n        const regex3 = /(\\d+)\\s+(.+\\S)\\s+\\((\\w{3,4})\\)/;\r\n\r\n        // Regex that parses number of cards and name only\r\n        const regex2 = /(\\d+)\\s+(.+\\S)/;\r\n\r\n        // Intended to be called on a section of the whole decklist like \"deck\" or \"sideboard\"\r\n        const sectionCards = []; // Array of objects: [{ number, matches }, ...]\r\n\r\n        // Use regex to extract card info and find matching card(s)\r\n        for (const line of deckStringsArray) {\r\n\r\n            // Skip lines that aren't strings\r\n            if (typeof line !== \"string\") {\r\n                continue;\r\n            }\r\n\r\n            // Check if line has all of (number of cards, name, set, and collection_number)\r\n            let match = line.match(regex4);\r\n\r\n            // Check if line has all of (number of cards, name, and set), but not collection_number\r\n            if (!match) {\r\n                match = line.match(regex3);\r\n            }\r\n\r\n            // Backup when line only has number of cards and name\r\n            if (!match) {\r\n                match = line.match(regex2);\r\n            }\r\n\r\n            // Find matching card(s) if there is a match\r\n            const cards = match? getDeckCard(match[2], match[3], match[4]) : [];\r\n\r\n            // Add the number of cards and the matching cards to the deckCards array\r\n            sectionCards.push({ \"number\": match && match[1]? parseInt(match[1], 10) : 0, \"matches\": cards });\r\n        }\r\n\r\n        return sectionCards;\r\n    }\r\n\r\n    async function fromFile() {\r\n        try {\r\n    \r\n            // Specify text file type\r\n            const options = {\r\n                types: [{ description: 'Text Files', accept: {'text/plain': ['.txt']} }]\r\n            };\r\n\r\n            // Get FileSystemFileHandle from the file picker, chosen from text files\r\n            let [file] = await window.showOpenFilePicker(options);\r\n\r\n            // Get the text file from the FileSystemFileHandle\r\n            file = await file.getFile();\r\n\r\n            // Get the text from the file\r\n            file = await file.text();\r\n\r\n            setImportedText(file);\r\n            \r\n        } catch (error) {\r\n\r\n            setImportedText(\"Sorry, there was an error importing that file.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Copies deck from clipboard\r\n     */\r\n     function fromClipboard() {\r\n        const deckString = toString;\r\n\r\n        // Write deck to clipboard\r\n        navigator.clipboard.readText().then( text => setImportedText(text) );\r\n    }\r\n\r\n    return (\r\n        <div id=\"importExportContent\">\r\n\r\n            <div className=\"spacedModalHeader\">\r\n\r\n                <div className=\"invisible closeButtonSpacer\"/>\r\n\r\n                <h1>Import Deck</h1>\r\n\r\n                <div className=\"closeModalButton\">\r\n                    <button onClick={() => setModalOpen(false)}><i className=\"close icon\"/></button>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Preview/Copy & Paste:</h3>\r\n            <textarea \r\n                id=\"deckPreview\" value={importedText} onChange={e => setImportedText(e.target.value)} spellCheck=\"false\"\r\n            />\r\n\r\n            <div id=\"fileOrClipboardButtons\">\r\n\r\n                <button onClick={fromFile}>\r\n                    Import from File\r\n                </button>\r\n\r\n                <button onClick={fromClipboard}>\r\n                    Copy from Clipboard\r\n                </button>\r\n\r\n                <button onClick={onSubmit}>\r\n                    <strong>Submit</strong>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImportDeck;\r\n","import React, { useState } from 'react';\r\n\r\nimport ExportDeck from './ExportDeck';\r\nimport ImportDeck from './ImportDeck';\r\nimport Modal from '../Templates/Modal';\r\nimport '../../css/ImportExportDeck.css';\r\n\r\n/**\r\n * The import and export deck buttons and their modal\r\n * @returns JSX for the buttons and modal\r\n */\r\nfunction ImportExportModal() {\r\n\r\n    // Import/export modal is open/closed\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    // Determine whether to show the import or export functions (defaults to export)\r\n    const [isImport, setIsImport] = useState(false);\r\n\r\n    // JSX in the modal --> only viewable if modalOpen is true\r\n    const modalContent = (\r\n        <div className=\"importExportModal darkMode\">\r\n            {isImport ? <ImportDeck setModalOpen={setModalOpen} /> : <ExportDeck setModalOpen={setModalOpen} />}\r\n        </div>\r\n    );\r\n\r\n    // If moddalOpen is true --> render the modal, false --> null\r\n    const renderedModal = modalOpen ? <Modal content={modalContent} show={modalOpen} setShow={setModalOpen} /> : null;\r\n\r\n    return (\r\n        <div id='importExportButtons'>\r\n            <button className=\"importExportButton\" title=\"Import Deck Button\"\r\n                onClick={() => {\r\n                    // Select import and open modal\r\n                    setIsImport(true);\r\n                    setModalOpen(!modalOpen);\r\n                }}\r\n            >\r\n                Import Deck\r\n            </button>\r\n            \r\n            <button className=\"importExportButton\" title=\"Export Deck Button\"\r\n                onClick={() => {\r\n                    // Select export and open modal\r\n                    setIsImport(false);\r\n                    setModalOpen(!modalOpen);\r\n                }}\r\n            >\r\n                Export Deck\r\n            </button>\r\n\r\n            {/* Open Modal only when buttons clicked */}\r\n            {renderedModal}            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImportExportModal;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport CustomDropdown from '../Templates/CustomDropdown';\r\nimport ImportExportModal from './ImportExportModal';\r\nimport { selectDeckType, setDeck, setSideboard, changeCommander, changeCompanion } from '../../actions';\r\nimport '../../css/DBDeckOptions.css';\r\n\r\n/**\r\n * Options that affect the deck in the deck builder. Includes the deck type (e.g. standard, limited, etc.), import and\r\n * export buttons, and clear/reset deck button.\r\n */\r\nfunction DBDeckOptions() {\r\n    \r\n    const dispatch = useDispatch();\r\n    const { deckType, deck, sideboard } = useSelector(state => state.deckBuilder);\r\n    \r\n    // Deck/game type\r\n    const items = [ \"standard\", \"historic\", \"limited\", \"brawl\", \"historicbrawl\", \"future\", \"custom\" ];\r\n    const labels = []; labels[4] = \"historic brawl\";\r\n    const renderGameType = <CustomDropdown\r\n        items={items} labels={labels} firstSelection={deckType}\r\n        selectfn={(item) => dispatch(selectDeckType(item))}\r\n        ariaLabel=\"Select deck type\"\r\n    />\r\n\r\n    // Reset deck\r\n    function clearDeck() {\r\n\r\n        // Check the deckType\r\n        if (deckType === 'limited' ){\r\n\r\n            // If creating limited deck --> move all cards from deck to sideboard, then clear deck, companion and commander\r\n            dispatch(setDeck([]));\r\n            dispatch(setSideboard(deck.concat(sideboard).flat()));\r\n            dispatch(changeCommander(null));\r\n            dispatch(changeCompanion(null));\r\n\r\n        } else {\r\n\r\n            // Clear deck, sideboard, companion, and commander\r\n            dispatch(setDeck([]));\r\n            dispatch(setSideboard([]));\r\n            dispatch(changeCommander(null));\r\n            dispatch(changeCompanion(null));\r\n        }\r\n    }\r\n\r\n    const clearButton = (\r\n        <button className=\"clearDeck\"\r\n            onClick={() => clearDeck()}\r\n        >\r\n            {deckType === \"limited\" ? \"Reset to Sideboard\" : \"Clear Deck\"}\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div id=\"DBDeckOptions\">\r\n\r\n            <label htmlFor=\"gameTypeDropDown\">Game Mode:</label>\r\n            <div id=\"gameTypeDropDown\">\r\n                {renderGameType}\r\n            </div>\r\n\r\n            <ImportExportModal />\r\n            {clearButton}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBDeckOptions;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport DBCardFilters from './DBCardFilters';\r\nimport DBDeckOptions from './DBDeckOptions';\r\nimport { setCurrentDragOver } from '../../actions';\r\nimport '../../css/DBSidebar.css';\r\n\r\n/**\r\n * The sidebar for the Deckbuilder\r\n * @returns JSX for sidebar\r\n */\r\nfunction DBSidebar() {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div id=\"DBSidebar\" \r\n            onDragEnter={() => dispatch(setCurrentDragOver())}\r\n        >\r\n            <DBCardFilters />\r\n            <DBDeckOptions />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBSidebar;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setAddType, setCurrentDragOver } from '../../actions';\r\nimport '../../css/DeckHeader.css';\r\n\r\n/**\r\n * Creates the header that separates the available cards to add to a deck and the deckList/sideboard. \r\n * Contains info about the decklist as well as buttons to help build the deck/sideboard. \r\n * @returns JSX\r\n */\r\nfunction DeckHeader() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { addType, deckType, addBasics } = useSelector(state => state.deckBuilder);\r\n    const deckOrSideboard = addType === \"sideboard\" ? false : true;\r\n\r\n    // Changes add type to 'deck' when you switch to limited mode\r\n    useEffect(() => {\r\n        if (deckType === 'limited') {\r\n            dispatch(setAddType('deck'))\r\n        }\r\n    },[deckType, dispatch])\r\n\r\n    // Get the deck array and flatten it;\r\n    let { deck, sideboard, commander, companion } = useSelector(state => state.deckBuilder);\r\n    deck = deck.flat();\r\n\r\n    // Initialize deck counts\r\n    const sideboardCount = companion ? sideboard.flat().length + 1 : sideboard.flat().length;\r\n    let deckCount        = commander ? 1 : 0;\r\n    let landCount        = 0;\r\n    let partialLandCount = 0;\r\n    let creatureCount    = 0; \r\n    let nonCreatureCount = 0;\r\n\r\n    // Count up totals\r\n    for (const card of deck) {\r\n        deckCount++;\r\n        \r\n        // If Creature appears anywhere in the type line update creature count (Do not care if card is double sided)\r\n        if (card.type_line.includes('Creature')) {\r\n            creatureCount++;\r\n        }\r\n\r\n        // Check if single sided (Dual sided cards have each type separated by //)\r\n        if (!card.type_line.includes('//')) {\r\n\r\n            // if land --> update landcount\r\n            if (card.type_line.includes('Land')) {\r\n                landCount++;\r\n            }\r\n            \r\n            // if not creature AND not land --> update noncreature count\r\n            if (!card.type_line.includes('Creature') && !card.type_line.includes('Land')) {\r\n                nonCreatureCount++;\r\n            }\r\n        }\r\n        // Else double sided\r\n        else {\r\n            // Regular expression to capture each side of the //\r\n            // eg. type_line = 'Instant // Land' --> want to capture 'Instant' and 'Land'\r\n            const sideRegex = /(.+) \\/\\/ (.+)/;\r\n            const sides = card.type_line.match(sideRegex);\r\n            const frontType = sides[1];\r\n            const backtype = sides[2];\r\n            \r\n            // if double sided and both sides have type line including 'Land' --> update land count\r\n            if (frontType.includes('Land') && backtype.includes('Land')){\r\n                landCount++;\r\n            } else {\r\n                // if double sided and only 1 side has type_lin including 'Land' --> update partialLandCount\r\n                // Since we know that both sides aren't lands, we can check the whole type_line for land to update partialLandCount\r\n                if (card.type_line.includes('Land')) {\r\n                    partialLandCount++;\r\n                }\r\n            }\r\n\r\n            // Check if is nonCreature\r\n            if (!card.type_line.includes('Creature') && (!frontType.includes('Land') || !backtype.includes('Land'))){\r\n                nonCreatureCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    let partialLandSpan = null;\r\n    if (partialLandCount > 0) {\r\n        partialLandSpan = <span>{`(+${partialLandCount})`}</span>\r\n    }\r\n\r\n    // Function sets the redux that makes the toggle switch sides\r\n    function toggle(event) {\r\n\r\n        event.stopPropagation();\r\n\r\n        // If currently on deck, swap to sideboard\r\n        if(deckOrSideboard) {\r\n            dispatch(setAddType(\"sideboard\"));\r\n        }\r\n        // If currently on sideboard, swap to deck\r\n        else {\r\n            dispatch(setAddType(\"deck\"));\r\n        }\r\n    }\r\n\r\n    // Toggle for deck and sideboard\r\n    // Turnary operator removes this element in limited mode\r\n    const addToggle = deckType === 'limited' ? null : (\r\n        <div\r\n            // Accessibility and events\r\n            className=\"addToggle\" tabIndex=\"0\"\r\n            onKeyDown={ e => {if (e.key === \"Enter\") toggle(e) } }\r\n            onMouseDown={ e => toggle(e) }\r\n            role=\"checkbox\" aria-checked={!deckOrSideboard} aria-label=\"Toggle add to deck or sideboard\"\r\n        >\r\n            {/* Deck */}\r\n            <span className=\"deck_sideboardToggleLabel\">Add to Deck</span>\r\n\r\n            {/* Deck or sideboard toggle */}\r\n            <div className=\"ui fitted toggle checkbox\">\r\n                <input \r\n                    type=\"checkbox\" name=\"deckOrSideboard\" id=\"deckOrSideboard\" tabIndex=\"-1\"\r\n                    checked={!deckOrSideboard} readOnly\r\n                />\r\n                <label tabIndex=\"-1\"></label>\r\n            </div>\r\n\r\n            {/* Sideboard */}\r\n            <span className=\"deck_sideboardToggleLabel\">Add to Sideboard</span>\r\n        </div>\r\n    );\r\n\r\n    // Set add mode to either commander or companion\r\n    function setComType(event, type) {\r\n\r\n        // Don't propagate events to deck header\r\n        event.stopPropagation();\r\n\r\n        // Toggle current type\r\n        if (type !== addType) {\r\n            dispatch(setAddType(type));\r\n        } else {\r\n            dispatch(setAddType(\"deck\"));\r\n        }\r\n    }\r\n\r\n    function setComButton(type) {\r\n\r\n        let buttonText;\r\n        let style = {};\r\n\r\n        if (type === addType) {\r\n            style.filter = \"brightness(70%)\"\r\n        }\r\n\r\n        switch (type) {\r\n            case \"commander\":\r\n                buttonText = \"Set Commander\";\r\n                break;\r\n            case \"companion\":\r\n                buttonText = \"Set Companion\";\r\n                break;\r\n            default:\r\n                buttonText = \"\";\r\n                break;\r\n        }\r\n\r\n        return <button\r\n            // Accessibility and events\r\n            key={`${type}`}\r\n            className=\"setComButton\" tabIndex=\"0\" aria-label={`Set ${type} button`}\r\n            onKeyDown={ e => {if (e.key === \"Enter\") setComType(e, type) } }\r\n            onMouseDown={ e => setComType(e, type) } style={style}\r\n        >\r\n            {buttonText}\r\n        </button>;\r\n    }\r\n\r\n    let comButtons = [];\r\n\r\n    // Don't show add Commander/Companion buttons when adding basic lands. Don't show Commander button unless needed.\r\n    if (addBasics) {}\r\n    else {\r\n        if ( [\"brawl\", \"historicbrawl\", \"custom\"].includes(deckType) ) {\r\n            comButtons.push(setComButton(\"commander\"));\r\n        }\r\n        comButtons.push(setComButton(\"companion\"));\r\n    }\r\n\r\n    return (\r\n        <div className=\"deckHeader\" onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n\r\n            <div className=\"left\">\r\n                <div className=\"deckCount\">Deck: {deckCount}</div>\r\n                <div className=\"landCount\">Land: {landCount}{partialLandSpan}</div>\r\n                <div className=\"creatureCount\">Creatures: {creatureCount}</div>\r\n                <div className=\"nonCreatureCount\">Noncreatures: {nonCreatureCount}</div>\r\n            </div>\r\n\r\n            <div className=\"right\">\r\n                {comButtons}\r\n                <div className=\"sideboardCount\">Sideboard: {sideboardCount}</div>\r\n                {addToggle}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeckHeader;\r\n","import React, { useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { changeCommander, changeCompanion, removeCardFromDeck, addCardToSideboard, setDragCard, dropCard, setCurrentDragOver } from '../../actions';\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport '../../css/DBDeck.css';\r\n\r\n/**\r\n * The cards that are actively in the user's deck.\r\n */\r\nfunction DBDeck() {\r\n    // Access redux dispatcher\r\n    const dispatch = useDispatch();\r\n\r\n    // Get Redux\r\n    const { cardCollection } = useSelector(state => state.inventory);\r\n    const { deck, commander, companion, deckType, addType, currentDragOver } = useSelector(state => state.deckBuilder);\r\n    \r\n    // Make an array of JSX for each of the 8 deck columns\r\n    const renderCards = useMemo(() => {\r\n\r\n        // Track cards added\r\n        const addedToDeck = {};\r\n\r\n        return deck.map((column, i) => {\r\n            let colClass = '';\r\n\r\n            if (currentDragOver.section === 'deck' && currentDragOver.col === i){\r\n                colClass = ' draggingOver';\r\n            }\r\n            return <div \r\n                className={`DBDeckColumn${colClass}`} key={'column'+i} draggable='false'\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={(e) => {\r\n                    e.stopPropagation(); \r\n                    dispatch(dropCard( 'deck', {col:i, row: deck[i].length}));\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={() => {\r\n                    dispatch(setCurrentDragOver('deck', i, deck[i].length));\r\n                }}\r\n            >\r\n                {/* Create a top element above the cards in each column */}\r\n                <div className=\"firstElement\"\r\n                    onDrop={(e) => {\r\n                        e.stopPropagation(); \r\n                        dispatch(dropCard('deck', {col: i, row: -1}))\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('deck', i, -1));\r\n                    }}\r\n                >\r\n                    {deck[i].length} \r\n                </div>\r\n\r\n                {/* Create JSX for each individual card */}\r\n                { column.map( (card, j) => {\r\n\r\n                    // Track that a copy of this card was added to the deck\r\n                    addedToDeck[card.arenaId] = addedToDeck[card.arenaId] ? addedToDeck[card.arenaId]+1 : 1;\r\n\r\n                    let cardStyle = {};\r\n\r\n                    // Add red boarder around cards not legal in current format\r\n                    if (card.legalities && card.legalities[deckType] && card.legalities[deckType] !== \"legal\" ) {\r\n                        cardStyle.boxShadow = '0 0 0 3px red';\r\n                        cardStyle.borderRadius = '5px';\r\n                    }\r\n\r\n                    // Don't mark unowned cards if inventory isn't initialized\r\n                    if (cardCollection && Object.keys(cardCollection).length > 0) {\r\n\r\n                        // Don't color if single copy of basic land owned\r\n                        if (card.type_line.toLowerCase().includes(\"basic\") && card.type_line.toLowerCase().includes(\"land\") \r\n                            && cardCollection[card.arenaId]\r\n                        ) {}\r\n\r\n                        // Special case cards\r\n                        else if (cardCollection[card.arenaId] && cardCollection[card.arenaId] >= 4 &&\r\n                                [70288, 69172, 67306, 76490].includes(card.arenaId)\r\n                        ) {}\r\n\r\n                        // Color unowned copies of this card\r\n                        else if ( (cardCollection[card.arenaId] === undefined) || (addedToDeck[card.arenaId] > cardCollection[card.arenaId]) ) {\r\n\r\n                            // Darken unowned cards\r\n                            cardStyle.filter = \"brightness(50%)\";\r\n                        }\r\n                    }\r\n                    // Make style for dragging cards\r\n                    // Check if column is the same\r\n                    if (currentDragOver.section === 'deck' && currentDragOver.col === i){\r\n                        // Check if row is greater than current dragOver\r\n                        if (j > currentDragOver.row){\r\n                            cardStyle.transform = 'translateY(10px)';\r\n                        }\r\n                    }\r\n\r\n                    return <div \r\n                        className=\"DBDeckCard\" key={'card'+i+j} style={{ zIndex: j }}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                    >\r\n                    <HoverPreview imgs={card.imgs}>\r\n                        <img\r\n                            src={card.imgs.front} alt={card.name} style={cardStyle} draggable='true' tabIndex={0}\r\n                            onDragStart={(e) => {\r\n                                dispatch(setDragCard(card, 'deck', {col: i, row: j}));\r\n                            }}\r\n                            onDragEnd={() => dispatch(setDragCard(null))}\r\n                            onDrop={(e) =>{\r\n                                e.stopPropagation(); \r\n                                dispatch(dropCard('deck', {col: i, row: j}))\r\n                                dispatch(setCurrentDragOver());\r\n                            }}\r\n                            onDragEnter={(e) => {\r\n                                e.stopPropagation();\r\n                                dispatch(setCurrentDragOver('deck',i, j));\r\n                            }}\r\n                            onClick={(e) => {\r\n                                dispatch(removeCardFromDeck(card, i, j));\r\n\r\n                                // If the deckType is limited, move the card to the sideboard\r\n                                if ( deckType === 'limited' ) {\r\n                                    dispatch(addCardToSideboard(card));\r\n                                }\r\n                            }}\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\") {\r\n                                    dispatch(removeCardFromDeck(card, i, j));\r\n\r\n                                    if ( deckType === 'limited' ) {\r\n                                        dispatch(addCardToSideboard(card));\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </HoverPreview>\r\n                    </div>;\r\n                } ) }\r\n            </div>;\r\n        });\r\n    }, [deck, deckType, cardCollection, dispatch, currentDragOver]);\r\n\r\n    // Show commander and companion only when they exist\r\n    const commander_companion = (commander  || companion || addType ==='commander' || addType === 'companion') ? (\r\n        <div id=\"commander_companion\" onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n\r\n            {/* Show commander if it exists */}\r\n            {commander || addType === 'commander' ? (<>\r\n                <div\r\n                    className=\"DBDeckColumn\" draggable='true'\r\n                    onDragOver={(e) => e.preventDefault()}\r\n                    onDragStart={() => dispatch(setDragCard(commander, 'commander', {col: null, row: null}))}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('commander', {col: null, row: null}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('commander'));\r\n                    }}\r\n                >\r\n                    <div className=\"firstElement\">Commander</div>\r\n                    <div className={currentDragOver.section === 'commander'? 'specialCard draggingOver' : \"specialCard\"}>\r\n                        {commander ? <HoverPreview imgs={commander.imgs}>\r\n                            <img\r\n                                src={commander.imgs.front} alt={commander.name} id=\"commanderCard\" tabIndex={0}\r\n                                onClick={() => dispatch(changeCommander())}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        dispatch(changeCommander());\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </HoverPreview> : null}\r\n                    </div>\r\n                </div>\r\n            </>) : null}\r\n\r\n            {/* Show companion if it exists */}\r\n            {companion || addType === 'companion' ? (<>\r\n                <div\r\n                    className=\"DBDeckColumn\" draggable='true'\r\n                    onDragOver={(e) => e.preventDefault()}\r\n                    onDragStart={() => dispatch(setDragCard(companion, 'companion', {col: null, row: null}))}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('companion', {col: null, row: null}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('companion'));\r\n                    }}\r\n                >\r\n                    <div className=\"firstElement\">Companion</div>\r\n                    <div className={currentDragOver.section === 'companion' ? 'specialCard draggingOver' : \"specialCard\"}>\r\n                        {companion ? <HoverPreview imgs={companion.imgs}>\r\n                            <img\r\n                                src={companion.imgs.front} alt={companion.name} id=\"companionCard\" tabIndex={0}\r\n                                onClick={() =>{\r\n                                    dispatch(changeCompanion());\r\n                                    if (deckType === 'limited') {\r\n                                        dispatch(addCardToSideboard(companion));\r\n                                    }\r\n                                }}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        dispatch(changeCompanion());\r\n                                        if (deckType === 'limited') {\r\n                                            dispatch(addCardToSideboard(companion));\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </HoverPreview> : null}\r\n                    </div>\r\n                </div>\r\n            </>) : null}\r\n        </div>\r\n    ) : null;\r\n\r\n    return (\r\n        <div id=\"DBDeck\">\r\n            {commander_companion}\r\n            {renderCards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBDeck;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { removeCardFromSideboard, setDragCard, dropCard, setCurrentDragOver } from './../../actions';\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport '../../css/DBSideboard.css';\r\n\r\nfunction DBSideboard() {\r\n\r\n    // Track whether sideboard is open\r\n    const [ open, setOpen ] = useState(true);\r\n    \r\n    // Redux\r\n    const { cardCollection } = useSelector(state => state.inventory);\r\n    const { deckType, sideboard, currentDragOver } = useSelector(state => state.deckBuilder);\r\n    const dispatch = useDispatch();\r\n\r\n    // Track cards added\r\n    const addedToDeck = {};\r\n\r\n    // Holds card JSX for sideboard\r\n    const renderSBCards = [];\r\n\r\n    // Counter for renderSBCards\r\n    let sbCounter = 0;\r\n\r\n    // Loop through rows in 2d array sideboard\r\n    for (let i=0; i<sideboard.length; i++) {\r\n\r\n        // Alias column in 2d array sideboard\r\n        for (let j=0; j<sideboard[i].length; j++) {\r\n\r\n            // Alias specific card within 2d sideboard\r\n            const card = sideboard[i][j];\r\n\r\n            // Track that a copy of this card was added to the deck\r\n            addedToDeck[card.arenaId] = addedToDeck[card.arenaId] ? addedToDeck[card.arenaId]+1 : 1;\r\n\r\n            let style = {};\r\n\r\n            // Add red boarder around cards not legal in current format\r\n            if (card.legalities && card.legalities[deckType] && card.legalities[deckType] !== \"legal\" ) {\r\n                style.boxShadow = '0 0 0 3px red';\r\n                style.borderRadius = '5px';\r\n            }\r\n\r\n            // Don't mark unowned cards if inventory isn't initialized\r\n            if (cardCollection) {\r\n\r\n                // Don't color if single copy of basic land owned\r\n                if (card.type_line.toLowerCase().includes(\"basic\") && card.type_line.toLowerCase().includes(\"land\") \r\n                    && cardCollection[card.arenaId]\r\n                ) {}\r\n\r\n                // Special case cards\r\n                else if (cardCollection[card.arenaId] && cardCollection[card.arenaId] >= 4 &&\r\n                        [70288, 69172, 67306, 76490].includes(card.arenaId)\r\n                ) {}\r\n\r\n                // Color unowned copies of this card\r\n                else if ( !cardCollection[card.arenaId] || (addedToDeck[card.arenaId] > cardCollection[card.arenaId]) ) {\r\n\r\n                    // Darken unowned cards\r\n                    style.filter = \"brightness(50%)\";\r\n                }\r\n            }\r\n\r\n            // Make style for dragging cards\r\n            if (currentDragOver.section === 'sideboard') {\r\n\r\n                // If the current column is less  --> translate down\r\n                // OR if the current column is the same and the row is bigger that currently being dragged over\r\n                if( currentDragOver.col < i || (currentDragOver.col === i && j > currentDragOver.row )) {\r\n                    style.transform = 'translateY(10px)';\r\n                }\r\n            }\r\n\r\n            // Add cards to render array\r\n            renderSBCards.push(<div className=\"DBDeckCard\" key={card + sbCounter} style={{ zIndex: sbCounter }}>\r\n                <HoverPreview imgs={card.imgs}>\r\n                <img draggable='true'\r\n                    src={card.imgs.front} alt={card.name} style={style}\r\n                    onClick={(e) => {\r\n                        dispatch(removeCardFromSideboard(card, i, j));\r\n                    }}\r\n                    onDragStart={() => {\r\n                        dispatch(setDragCard(card, 'sideboard', {col: i, row: j} ))\r\n                    }}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('sideboard', {col: i, row: j}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) =>{\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', i, j));\r\n                    }}\r\n                />\r\n                </HoverPreview>\r\n            </div>);\r\n\r\n            // Increment counter (for setting z-index)\r\n            sbCounter++;\r\n\r\n        } // End column loop (j)\r\n    } // End row loop (i)\r\n    \r\n    // Flip triangle button direction when opening or closing the sideboard\r\n    let iconClass = 'SBshowButton icon caret right';\r\n    let sideboardClass = 'sideboard';\r\n    if (!open) {\r\n        iconClass = 'SBshowButton icon caret left';\r\n        sideboardClass = 'sideboard closed';\r\n    }\r\n    const showButton = <div className=\"sideboardseparator\">\r\n        <i className={iconClass} onClick={() => setOpen(!open)}/>\r\n\r\n    </div>\r\n\r\n    return (\r\n        <div className={sideboardClass} onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n            {showButton}\r\n            <div className={currentDragOver.section === 'sideboard' ? \"DBDeckColumn draggingOver\" : 'DBDeckColumn'}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={() => {\r\n                    dispatch(dropCard('sideboard', {col: 7, row: sideboard[7].length}))\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={(e) => {\r\n                    e.stopPropagation();\r\n                    dispatch(setCurrentDragOver('sideboard', 7, sideboard[7].length))\r\n                }}\r\n            >\r\n                <div className=\"firstElement\"\r\n                    onDrop={(e) =>{\r\n                        e.stopPropagation(); \r\n                        dispatch(dropCard('sideboard', {col: 0, row: -1}))\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', 0, -1));\r\n                    }}\r\n                >\r\n                </div>\r\n                {renderSBCards}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBSideboard;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport { removeCardFromSideboard, addCardToDeck, limitedSort, setDragCard, dropCard, changeCompanion, setCurrentDragOver } from '../../actions';\r\nimport findCards from '../../data/findCards';\r\nimport '../../css/LimitedSideboard.css';\r\n\r\n/**\r\n * When the deckbuilder is in limited mode, it should change the cardList displayed to the sideboard\r\n * @returns JSX\r\n */\r\nfunction LimitedSideboard() {\r\n    const dispatch = useDispatch();\r\n    const { sideboard } = useSelector(state => state.deckBuilder);\r\n    \r\n    return ( \r\n        <div className=\"limitedSideboard\">\r\n            <div className=\"limitedSideboard-header\">\r\n                <label htmlFor=\"sortButtons\">Sort By:</label>\r\n                <div className=\"sortButtons\">\r\n                    <button className='sortCmc' \r\n                        onClick={() => dispatch(limitedSort('cmc'))}>Mana Value\r\n                    </button>\r\n                    <button className='sortColor'\r\n                        onClick={() => dispatch(limitedSort('color'))}>Color\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"limitedSideboard-cards\">\r\n                <SideboardColumn cardArray={sideboard[0]} col={0}/>\r\n                <SideboardColumn cardArray={sideboard[1]} col={1}/>\r\n                <SideboardColumn cardArray={sideboard[2]} col={2}/>\r\n                <SideboardColumn cardArray={sideboard[3]} col={3}/>\r\n                <SideboardColumn cardArray={sideboard[4]} col={4}/>\r\n                <SideboardColumn cardArray={sideboard[5]} col={5}/>\r\n                <SideboardColumn cardArray={sideboard[6]} col={6}/>\r\n                <SideboardColumn cardArray={sideboard[7]} col={7}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * A helper react component to create a column of cards \r\n * @returns JSX\r\n */\r\nfunction SideboardColumn({cardArray, col}) {\r\n    const dispatch = useDispatch();\r\n    const { colors, rarity, cardTypes, searchTerm, searchType, cmc } = useSelector(state => state.displayOptions);\r\n    const { addType, currentDragOver } = useSelector(state => state.deckBuilder);\r\n   \r\n    // Create rarity search option from rarity object\r\n    let rarityOptions = [];\r\n    for (const option in rarity) {\r\n\r\n        // Add rarity to rarityOption if it's selected\r\n        if (rarity[option]) {\r\n            rarityOptions.push(option);\r\n        }\r\n    }\r\n\r\n    // Make cardTypes retrieved from redux into a usable form for findCards\r\n    // Currently is an array of objects --> Need just simple array\r\n\r\n    let searchCardTypes = undefined; // Initialize as undefined for case where reduxcardTypes is empty\r\n\r\n    if ( cardTypes.length >= 1 ) {\r\n        searchCardTypes = []; // Change to empty array to add push method \r\n\r\n        for (const cardType of cardTypes) {\r\n            // Only push the value property from reduxCardTypes into array\r\n            searchCardTypes.push(cardType.val);\r\n        }\r\n    }\r\n\r\n    // Check the cmc values for \"Any\" string and change them to undefined\r\n    let searchcmc = {...cmc};\r\n\r\n    if (searchcmc.min === 'Any') {\r\n        searchcmc.min = undefined;\r\n    }\r\n    if (searchcmc.max === 'Any') {\r\n        searchcmc.max = undefined;\r\n    }\r\n\r\n    // Set rarityOption to undefined if all or none of the rarities are added to it\r\n    if (rarityOptions.length < 1 || rarityOptions.length > 3) {\r\n        rarityOptions = undefined;\r\n    }\r\n\r\n    // Make searchOptions object\r\n    const searchOptions = {color: colors, rarity: rarityOptions, cardTypes: searchCardTypes, term: searchTerm, advancedSearchType: searchType, cmc: searchcmc, addType};\r\n    // Use findCards to filter the sideboard cards\r\n    const cardList = findCards(searchOptions, cardArray, false);\r\n\r\n    function moveToDeck(event, card) {\r\n        event.stopPropagation();\r\n        dispatch(removeCardFromSideboard(card, col, cardArray.indexOf(card)));\r\n        if (addType === 'deck'){\r\n            dispatch(addCardToDeck(card));\r\n        }\r\n        if (addType === 'companion'){\r\n            dispatch(changeCompanion(card));\r\n        }\r\n    }\r\n\r\n    let renderColumn;\r\n    renderColumn = cardList.map( (card, i )=> {\r\n        let cardStyle = {};\r\n\r\n        // Make style for dragging cards\r\n        // Check if column is the same\r\n        if (currentDragOver.section === 'sideboard' && currentDragOver.col === col){\r\n\r\n            // Check if row is greater than current dragOver\r\n            if (i > currentDragOver.row){\r\n                cardStyle.transform = 'translateY(10px)';\r\n            }\r\n        }\r\n\r\n        return (\r\n            // Using DBDeckCard class from dbdeck\r\n            <div className=\"DBDeckCard\" key={card.name + i} \r\n                onClick={(e) => moveToDeck(e, card)}\r\n            >\r\n                <HoverPreview imgs={card.imgs}>\r\n                    <img src={card.imgs.front} alt={card.name} style={cardStyle}\r\n                    onDragStart={() => {\r\n                        // Cannot use i as row index because if cards are filtered out the index may be incorrect\r\n                        dispatch(setDragCard(card, 'sideboard', {col: col, row: cardArray.indexOf(card)}));\r\n                    }}\r\n                    onDragEnd={() => {\r\n                        dispatch(setDragCard(null));\r\n                    }}\r\n                    onDrop={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(dropCard('sideboard', {col: col, row: cardArray.indexOf(card)}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', col, cardArray.indexOf(card)));\r\n                    }}\r\n                    />\r\n                </HoverPreview>\r\n            </div>\r\n        )\r\n    });    \r\n\r\n    return (\r\n        // Using same styles as dbdeck\r\n        <div className={currentDragOver.section === 'sideboard' && currentDragOver.col === col ? \r\n        'DBDeckColumn draggingOver' : 'DBDeckColumn'}\r\n            onDrop={(e) => {\r\n                e.stopPropagation();\r\n                dispatch(dropCard('sideboard', {col: col, row: cardArray.length}));\r\n                dispatch(setCurrentDragOver());\r\n            }}\r\n            onDragEnter={(e) => {\r\n                e.stopPropagation();\r\n                dispatch(setCurrentDragOver('sideboard', col, cardArray.length));\r\n            }}\r\n        >\r\n            {/* Create a top element above the cards in each column */}\r\n            <div className=\"firstElement\"\r\n                onDrop={(e) =>{\r\n                    e.stopPropagation(); \r\n                    dispatch(dropCard('sideboard', {col: col, row: -1}))\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={(e) => {\r\n                    e.stopPropagation();\r\n                    dispatch(setCurrentDragOver('sideboard', col, -1));\r\n                }}\r\n                >\r\n                    {cardList.length} \r\n                </div>\r\n            {renderColumn}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LimitedSideboard;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRef } from 'react';\r\n\r\nimport { dropCard } from '../../actions';\r\nimport DBSidebar from './DBSidebar';\r\nimport DeckHeader from './DeckHeader';\r\nimport DBDeck from './DBDeck';\r\nimport CardList from '../All/CardList';\r\nimport DBSideboard from './DBSideboard';\r\nimport LimitedSideboard from './LimitedSideboard';\r\nimport '../../css/DeckBuilder.css';\r\n\r\nfunction DeckBuilder() {\r\n    const cardListRef = useRef();\r\n\r\n    function MoveSlider(e) {\r\n        // Get the current Y position of mouse\r\n        let mouseHeight = e.clientY;\r\n\r\n        // Change overflow-Y from scroll to hidden so it can't randomly scroll\r\n        // Also Add a margin right equal to the size of the scrollbar so elements don't jump\r\n        cardListRef.current.style.overflowY = \"hidden\"\r\n        cardListRef.current.style.marginRight = \"10px\"\r\n        \r\n        // Add event listener for mouse movement\r\n        document.onmousemove = function onMouseMove(e) {\r\n            // Re-Calculate size of cardList\r\n            cardListRef.current.style.height = cardListRef.current.offsetHeight + e.clientY - mouseHeight + \"px\";\r\n            \r\n            // Update mouseHeight\r\n            mouseHeight = e.clientY;\r\n        }\r\n        // Remove event listener for mousemove when you let go of click. Also remove this event\r\n        document.onmouseup = () => {\r\n            document.onmousemove = document.onmouseup = null\r\n\r\n            // Reset scrolling behavior and margin\r\n            cardListRef.current.style.overflowY = \"scroll\"\r\n            cardListRef.current.style.marginRight = \"0\"\r\n        }\r\n    }\r\n    const { deckType, addBasics } = useSelector(state => state.deckBuilder);\r\n    // Change the shown cards to add to deck to the limited sideboard if deckType is limited and not adding basic lands\r\n    const dbCardList = (deckType === 'limited' && !addBasics) ? <LimitedSideboard /> : <CardList scrollingParent={\".dbCardList\"} deckBuilder />;\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div id=\"DeckBuilder\">\r\n            <DBSidebar />\r\n\r\n            <div className=\"mainContent\">\r\n                <div className=\"dbCardList\" ref={cardListRef}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={() => {\r\n                    if ( deckType !=='limited' ) {\r\n                        dispatch(dropCard('collection', null));\r\n                    }\r\n                }}\r\n                >\r\n                    {dbCardList}\r\n                </div>\r\n                <div className=\"slider\" onMouseDown={(e)=>MoveSlider(e)}>\r\n                    <DeckHeader />\r\n                </div>\r\n                <div className=\"deckSection\">\r\n                    <DBDeck />  \r\n                    {deckType ==='limited'? null : <DBSideboard />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeckBuilder;\r\n","module.exports = require(\"regenerator-runtime\");\n"],"sourceRoot":""}