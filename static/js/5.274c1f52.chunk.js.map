{"version":3,"sources":["components/SetDetails/SetDetailsMenu.js","components/SetDetails/DisplayOptions.js","hooks/useBooster.js","data/packsNeeded.js","components/SetDetails/ManualPacks.js","components/SetDetails/PacksCalculator.js","data/draftRewards.js","data/draftsNeeded.js","components/SetDetails/DraftsCalculator.js","hooks/useDraft.js","hooks/useResizeWidth.js","components/SetDetails/CardModal.js","components/All/SetNotFound.js","components/SetDetails/SetDetails.js","components/All/ProgressBar.js","components/All/RarityCollectionItem.js"],"names":["SetDetailsMenu","dispatch","useDispatch","activeTab","useSelector","state","displayOptions","Array","fill","cardFiltersClass","packsClass","draftsClass","className","id","onClick","selectDetailsMenu","onKeyDown","e","key","tabIndex","role","DisplayOptions","SearchBar","RarityButtons","header","ColorCheckboxes","NumberOwnedDropdown","BoosterDropdown","CMCDropdowns","CardTypeDropdown","Reset","useBooster","setId","boosters","inventory","player","Boosters","booster","SetCode","toLowerCase","Count","packsNeeded","rarity","numCardsOwned","numCardsTotal","mythicUpgradeRate","setInfo","mythic_upgrade","rareRate","nonWildcardRate","rare_rate","packsToComplete","numMissing","Math","ceil","ManualPacks","set","packCount","htmlFor","type","min","name","value","onChange","setPackNumber","parseInt","target","PacksCalculator","useParams","ownedBoosters","rare","raresOwned","ownedTotal","raresTotal","setTotal","packsToCompleteRares","mythic","mythicsOwned","mythicsTotal","packsToCompleteMythics","collationId","message","premierGems","winRate","_helper","premierPacks","quickGems","quickPacks","traditionalGems","traditionalPacks","c","total","i","length","draftsNeeded","cardsPicked","rewardPacks","ownedPacks","rarityOpenRate","numerator","denominator","parseFloat","DraftsCalculator","useState","draftType","setDraftType","setWinRate","debouncedWinRate","setDebouncedWinRate","raresPicked","setRaresPicked","debouncedRaresPicked","setDebouncedRaresPicked","mythicsPicked","setMythicsPicked","debouncedMythicsPicked","setDebouncedMythicsPicked","useEffect","draftWinRate","window","localStorage","getItem","draftRaresPicked","draftMythicsPicked","preferredDraftType","timeoutid","setTimeout","setItem","clearTimeout","gems","packs","useDraft","rareDraftsNeeded","mythicDraftsNeeded","rareCost","gold","mythicCost","totalRareGemReward","floor","toLocaleString","totalMythicGemReward","renderDropDown","CustomDropdown","items","ariaLabel","firstSelection","selectfn","item","checkCardsPicked","valueNum","renderWinRate","max","checkWinRate","renderRaresPickedInput","step","renderMythicsPickedInput","renderOutput","src","gold_img","alt","gem_img","href","useResizeWidth","width","innerWidth","size","setSize","debouncedResize","func","delay","timer","apply","arguments","debounce","addEventListener","removeEventListener","CardModal","show","modal","showCardModal","content","cardContent","index","imgSide","imageList","img","imgLength","goLeft","useCallback","setCardModalContent","goRight","flipCard","back","imgRef","current","style","transition","flipRef","animation","prevRef","useRef","nextRef","BUTTON_CLASS","exit","prev","aria-label","title","aria-keyshortcuts","ref","disabled","blur","next","cardImage","front","flipButton","event","stopPropagation","renderedContent","keyEvents","keys","keyFunction","Modal","setShow","val","SetNotFound","U","G","SetDetails","document","body","scrollTop","documentElement","sum","Object","forEach","percentOwned","toFixed","setName","activeTabComponent","setDetailsColumns","displayOptionsColumns","detailsHeader","logo","RarityCollectionItem","CardList","ProgressBar","percent","innerClass","innerRef","symbol","slice"],"mappings":"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","file":"static/js/5.274c1f52.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectDetailsMenu } from '../../actions';\r\nimport '../../css/SetDetailsMenu.css';\r\n\r\nfunction SetDetailsMenu() {\r\n    // Get dispatch function\r\n    const dispatch = useDispatch();\r\n\r\n    // Get active tab info from redux\r\n    const activeTab = useSelector(state => state.displayOptions.activeTab);\r\n    \r\n    // Fill each class with common class names\r\n    let [cardFiltersClass, packsClass, draftsClass] = Array(3).fill('setDetailsTab');\r\n\r\n    // Add additional class 'active' if tab is active\r\n    switch (activeTab) {\r\n        case 'Card Filters':\r\n            cardFiltersClass += ' active';\r\n            break;\r\n\r\n        case 'Packs':\r\n            packsClass += ' active';\r\n            break;\r\n\r\n        case 'Drafts':\r\n            draftsClass += ' active';\r\n            break;\r\n            \r\n        default:\r\n           break;\r\n    }\r\n    \r\n    // Return JSX for tab menu\r\n    return (\r\n        <div className=\"setDetailsTabs\">\r\n            <div className={cardFiltersClass} id=\"cardFiltersTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Card Filters'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Card Filters'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n                Filter Displayed Cards\r\n            </div>\r\n            <div className={packsClass} id=\"packCalcTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Packs'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Packs'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n               Booster Calculator\r\n            </div>\r\n            <div className={draftsClass} id=\"draftCalcTab\"\r\n            onClick={()=> dispatch(selectDetailsMenu('Drafts'))}\r\n            onKeyDown={(e)=> {if(e.key === \"Enter\"){dispatch(selectDetailsMenu('Drafts'))}}}\r\n            tabIndex=\"0\" role=\"button\"\r\n            >\r\n                Draft Calculator\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetDetailsMenu;","import React from 'react';\r\n\r\nimport NumberOwnedDropdown from './NumberOwnedDropdown';\r\nimport BoosterDropdown from './BoosterDropdown';\r\nimport CMCDropdowns from './CMCDropdowns';\r\nimport ColorCheckboxes from './ColorCheckboxes';\r\nimport Reset from './Reset';\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport RarityButtons from './RarityButtons';\r\nimport CardTypeDropdown from './CardTypeDropdown'\r\nimport '../../css/DisplayOptions.css';\r\n\r\nfunction DisplayOptions() {\r\n    return (\r\n    <div className=\"DisplayOptions\">\r\n        <SearchBar/>\r\n        <RarityButtons header=\"Select Rarity/Rarities to Show:\" />\r\n\r\n        {/* Checkboxes for color: White, Blue, Black, Red, Green, All Multicolored, Colorless */}\r\n        <ColorCheckboxes header=\"Select Color/Colors to Show:\"/>\r\n\r\n        {/* DropDowns that select cards to show based on number in inventory and whether they are in boosters*/}\r\n        <div className=\"display-options-dropdowns\">\r\n            <NumberOwnedDropdown header=\"Number You Own:\" />\r\n            <BoosterDropdown header=\"In Booster Packs?\" />\r\n            <CMCDropdowns header=\"Select Mana Costs:\"/>\r\n            <CardTypeDropdown />\r\n            <Reset />\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default DisplayOptions;","import { useSelector } from 'react-redux';\r\n\r\nfunction useBooster(setId) {\r\n\r\n    // Get the boosters owned by the player\r\n    const boosters = useSelector(state => state.inventory.player.Boosters);\r\n\r\n    for (const booster of boosters) {\r\n        if ( booster.SetCode.toLowerCase() === setId ) {\r\n\r\n            // Get the number and stop checking \r\n            return booster.Count;\r\n        }\r\n    }\r\n\r\n    return 0;   \r\n}\r\n\r\nexport default useBooster;","import { setInfo } from './setInfo';\r\n\r\n/**\r\n * \r\n * @param {String} setId 3 letter set Id \r\n * @param {String} rarity \"rare\" or \"mythic\"\r\n * @param {Number} numCardsOwned Number of cards owned of the given rarity and set\r\n * @param {Number} numCardsTotal Total number of cards of the given rarity in set\r\n * @returns Returns the average number of packs required to open to achieve 100% completion of the given rarity\r\n */\r\nfunction packsNeeded(setId, rarity, numCardsOwned, numCardsTotal) {\r\n\r\n    // use setId to get the mythic upgrade rate from setInfo and get rareRate using this value\r\n    let mythicUpgradeRate = setInfo[setId].mythic_upgrade;\r\n    let rareRate = 1 - mythicUpgradeRate;\r\n\r\n    // The wildcard rate for mythics and for rares is (1/30) each so the nonWildcard rate is 1-(1/30)-(1/30)  = (14/15)\r\n    const nonWildcardRate = 14/15;\r\n\r\n    // For strixhaven mystical archive the rareRate is explicit since a rare/mythic is not in every pack\r\n    if ( setId === 'sta' ) {\r\n        // Mystical archive cards can NOT upgrade to wildcards\r\n        // therefore these values are divided by the nonWildcardRate in order to cancel out the term in the packsToComplete calculation\r\n        rareRate = setInfo[setId].rare_rate / nonWildcardRate;\r\n        mythicUpgradeRate = mythicUpgradeRate / nonWildcardRate;\r\n    }\r\n\r\n    // Calculate the number of cards missing\r\n    const numMissing = numCardsTotal - numCardsOwned;\r\n\r\n    let packsToComplete;\r\n\r\n    // If the rarity of the missing cards is \"rare\", we subtract the mythic upgrade rate from 1 to get the rare rate\r\n    if ( rarity === 'rare' ) {\r\n        packsToComplete = numMissing / (rareRate * nonWildcardRate);\r\n    }\r\n    // rarity === 'mythic'\r\n    else {\r\n        packsToComplete = numMissing / (mythicUpgradeRate * nonWildcardRate);\r\n    }\r\n\r\n    packsToComplete = Math.ceil(packsToComplete)\r\n\r\n    return packsToComplete; \r\n\r\n}\r\n\r\nexport default packsNeeded;","import React from \"react\";\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport useBooster from \"../../hooks/useBooster\";\r\nimport { setPackNumber } from \"../../actions\";\r\n\r\nfunction ManualPacks({set}){\r\n    const dispatch = useDispatch();\r\n    const packCount = useBooster(set);\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor=\"Packnum\">Packs Owned: </label>\r\n            <input \r\n                type=\"number\" min=\"0\" name=\"Pack Number\" id=\"Packnum\" value={packCount}\r\n                onChange={(e) => dispatch(setPackNumber(parseInt(e.target.value), set))}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ManualPacks;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport useBooster from '../../hooks/useBooster';\r\n\r\nimport packsNeeded from '../../data/packsNeeded';\r\nimport ManualPacks from './ManualPacks';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport '../../css/PacksCalculator.css';\r\n\r\nfunction PacksCalculator() {\r\n    const { setId } = useParams();\r\n\r\n    const ownedBoosters = useBooster(setId);\r\n\r\n    // Grab values from redux and compute the average number of packs required to 100% complete rare collection\r\n    const { ownedTotal: raresOwned, setTotal: raresTotal } = useSelector( ({inventory}) => inventory.set[setId].rare);\r\n    const packsToCompleteRares = packsNeeded(setId, 'rare' , raresOwned, raresTotal);\r\n\r\n    // Grab values from redux and compute the average number of packs required to 100% complete mythic collection\r\n    const { ownedTotal: mythicsOwned, setTotal: mythicsTotal } = useSelector( ({inventory}) => inventory.set[setId].mythic);\r\n    const packsToCompleteMythics = packsNeeded(setId, 'mythic' , mythicsOwned, mythicsTotal);\r\n\r\n    // Check if the set is obtainable from normal boosters\r\n    if ( !setInfo[setId].collationId ) {\r\n        const message = `${setInfo[setId].name} is not obtainable from normal Booster Packs`;\r\n        return (\r\n            // The styling for this id is reused from PackCalculator.css\r\n            <div id=\"notAvailable\">\r\n                <h2>{message}</h2>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"calculator\"> \r\n            <h2>< ManualPacks set={setId} /></h2>\r\n            <h2>Additional Packs Needed to Complete:</h2>       \r\n            <h3>Rares: <span className=\"packNumber\">{packsToCompleteRares - ownedBoosters}</span> </h3>                        \r\n            <h3>Mythics: <span className=\"packNumber\">{packsToCompleteMythics - ownedBoosters}</span> </h3>            \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PacksCalculator;","/**\r\n * Calculate average number of gems received from the premier draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of gems\r\n */\r\nexport function premierGems(winRate) {\r\n    const c = [50.03402492416154, 149.0845378348272, 775.7095799076778, 6054.504887371673, -3216.3085852051154, -5332.006638400257, 9472.429232232273, 1870.4744680039585, -18349.270998546854, 10725.295188058168];\r\n    return _helper(winRate, c);\r\n}\r\n\r\n/**\r\n * Calculate average number of packs received from the premier draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of packs\r\n */\r\nexport function premierPacks(winRate) {\r\n    const c = [1.0001034942542077, -0.005057280757823079, 6.153850352314848, -9.776702399434953, 27.65365635535818, -31.080652027645556, 49.45758591449703, -40.889581309435016, -19.915665630240255, 23.402303936034514];\r\n    return _helper(winRate, c);\r\n}\r\n\r\n/**\r\n * Calculate average number of gems received from the quick draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of gems\r\n */\r\nexport function quickGems(winRate) {\r\n    const c = [50.034438537573195, 145.9440564146371, 550.2674764168405, -750.7812855812663, 6126.646088509122, -13334.577573805349, 24578.101417684462, -27026.63596521155, 10610.987441387784];\r\n    return _helper(winRate, c);\r\n}\r\n\r\n/**\r\n * Calculate average number of packs received from the quick draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of packs\r\n */\r\nexport function quickPacks(winRate) {\r\n    const c = [1.2000150470898692, 0.06152929250334793, 0.07210486716212472, -0.36851214770831575, 3.435597054889513, -10.136353908614183, 19.05764437108519, 0.351017877814229, -26.09476746197288, 14.421703982894996];\r\n    return _helper(winRate, c);\r\n}\r\n\r\n/**\r\n * Calculate average number of gems received from the traditional draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of gems\r\n */\r\nexport function traditionalGems(winRate) {\r\n    const c = [0.03902737106636067, -0.48833137471945065, 3000.522806855206];\r\n    return _helper(winRate, c);\r\n}\r\n\r\n/**\r\n * Calculate average number of packs received from the traditional draft given the win rate.\r\n * @param {Number} winRate Decimal win rate between 0 and 1\r\n * @returns Average number of packs\r\n */\r\nexport function traditionalPacks(winRate) {\r\n    const c = [1.0000196978713674, -0.00041634432364678897, 9.000098671941068, -3.99955576362173];\r\n    return _helper(winRate, c);\r\n}\r\n\r\nfunction _helper(winRate, c) {\r\n    let total = 0;\r\n    for (let i=0; i<c.length; i++) {\r\n        total += c[i] * winRate**i;\r\n    }\r\n    return total;\r\n}","import { setInfo } from './setInfo';\r\n\r\nfunction draftsNeeded(setId, rarity, ownedTotal, setTotal, cardsPicked, rewardPacks, ownedPacks=0) {\r\n    const mythicUpgradeRate = setInfo[setId].mythic_upgrade;\r\n    const numMissing = setTotal - ownedTotal;\r\n\r\n    // The wildcard rate for mythics and for rares is (1/30) each so the nonWildcard rate is 1-(1/30)-(1/30)  = (14/15)\r\n    const nonWildcardRate = 14/15;\r\n\r\n    // Most cards picked will be rare, but account for specific mythic upgrade rate\r\n    // Default value is for when rarity === \"rare\"\r\n    let rarityOpenRate = 1 - mythicUpgradeRate;\r\n\r\n    if (rarity === \"mythic\") {\r\n        rarityOpenRate = mythicUpgradeRate;\r\n    }\r\n    // Strixhaven mytical archive works differently and has a rare rate as well as a mythic rate\r\n    if (setId === 'sta') {\r\n        // Mystical archive cards also can NOT upgrade to wildcards\r\n        // therefore these values are divided by the nonWildcardRate in order to cancel out the term in the numerator/denominator calculation\r\n        if (rarity === 'rare') {\r\n            rarityOpenRate = setInfo[setId].rare_rate / nonWildcardRate;\r\n        }\r\n        if ( rarity === 'mythic') {\r\n            rarityOpenRate = setInfo[setId].mythic_upgrade / nonWildcardRate;\r\n        }\r\n    }\r\n\r\n    const numerator = numMissing - ownedPacks * rarityOpenRate * nonWildcardRate;\r\n    const denominator = parseFloat(cardsPicked) + rewardPacks * rarityOpenRate * nonWildcardRate;\r\n\r\n    // Round number of drafts up to whole number\r\n    return Math.ceil(numerator / denominator);\r\n}\r\n\r\nexport default draftsNeeded;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport CustomDropdown from '../Templates/CustomDropdown';\r\nimport ManualPacks from './ManualPacks';\r\nimport useBooster from '../../hooks/useBooster';\r\nimport useDraft from '../../hooks/useDraft';\r\nimport draftsNeeded from '../../data/draftsNeeded';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport '../../css/DraftsCalculator.css';\r\n\r\nimport gem_img from '../../images/arena/Gem.png';\r\nimport gold_img from '../../images/arena/Gold.png';\r\n\r\nfunction DraftsCalculator() {\r\n    const [draftType, setDraftType] = useState(\"premier\");\r\n    const [winRate, setWinRate] = useState(50);\r\n    const [debouncedWinRate, setDebouncedWinRate] = useState(winRate);\r\n    const [raresPicked, setRaresPicked] = useState(2.6);\r\n    const [debouncedRaresPicked, setDebouncedRaresPicked] = useState(raresPicked);\r\n    const [mythicsPicked, setMythicsPicked] = useState(0.4);\r\n    const [debouncedMythicsPicked, setDebouncedMythicsPicked] = useState(mythicsPicked);\r\n    \r\n    // Reset the default values for winRate, raresPicked, mythicsPicked, and draftType to values from localstate if possible\r\n    useEffect(() => {\r\n        // Get the values from localstorage --> will be null if user hasn't used before or cleared the localStorage\r\n        const draftWinRate = window.localStorage.getItem('draftWinRate');\r\n        const draftRaresPicked = window.localStorage.getItem('draftRaresPicked');\r\n        const draftMythicsPicked = window.localStorage.getItem('draftMythicsPicked');\r\n        const preferredDraftType = window.localStorage.getItem('preferredDraftType');\r\n\r\n        // set the values and debounced values to the localStorage values if the value was found in localStorage\r\n        if ( draftWinRate ){\r\n            setDebouncedWinRate(draftWinRate);\r\n            setWinRate(draftWinRate);\r\n        }\r\n        if ( draftRaresPicked ){\r\n            setDebouncedRaresPicked(draftRaresPicked);\r\n            setRaresPicked(draftRaresPicked);\r\n        }\r\n        if ( draftMythicsPicked ){\r\n            setDebouncedMythicsPicked(draftMythicsPicked);\r\n            setMythicsPicked(draftMythicsPicked);\r\n        }\r\n        if ( preferredDraftType ) {\r\n            setDraftType(preferredDraftType);\r\n        }\r\n\r\n    },[]);\r\n    \r\n    // Grab set id from url\r\n    const { setId } = useParams();\r\n\r\n    const ownedBoosters = useBooster(setId);\r\n\r\n    // Get mythic/rare totals from redux\r\n    const { ownedTotal: mythicsOwned, setTotal: mythicsTotal } = useSelector( ({inventory}) => inventory.set[setId].mythic);\r\n    const { ownedTotal: raresOwned,   setTotal: raresTotal   } = useSelector( ({inventory}) => inventory.set[setId].rare);\r\n\r\n    // Track change in win rate input\r\n    useEffect(() => {\r\n\r\n        // Wait for user to stop typing\r\n        const timeoutid = setTimeout( () => {\r\n            setWinRate(debouncedWinRate);\r\n            window.localStorage.setItem('draftWinRate', debouncedWinRate);\r\n        }, 500);\r\n\r\n        // Cleanup function to stop timer\r\n        return () => clearTimeout(timeoutid);\r\n    }, [debouncedWinRate])\r\n\r\n    // Track change in new rares picked\r\n    useEffect(() => {\r\n\r\n         // Wait for user to stop typing\r\n         const timeoutid = setTimeout( () => {\r\n            setRaresPicked(debouncedRaresPicked);\r\n            window.localStorage.setItem('draftRaresPicked', debouncedRaresPicked);\r\n        }, 500);\r\n\r\n        // Cleanup function to stop timer\r\n        return () => clearTimeout(timeoutid);\r\n    }, [debouncedRaresPicked]);\r\n\r\n    // Track change in new mythics picked\r\n    useEffect(() => {\r\n\r\n        // Wait for user to stop typing\r\n        const timeoutid = setTimeout( () => {\r\n           setMythicsPicked(debouncedMythicsPicked);\r\n           window.localStorage.setItem('draftMythicsPicked',debouncedMythicsPicked);\r\n       }, 500);\r\n\r\n       // Cleanup function to stop timer\r\n       return () => clearTimeout(timeoutid);\r\n   }, [debouncedMythicsPicked]);\r\n\r\n    // Get the average gems/packs per draft\r\n    const { gems, packs: rewardPacks } = useDraft(draftType, winRate/100);\r\n\r\n    // Check if the set is not draftable (reminder: the collationId is the value for the booster pack of the set)\r\n    if (!setInfo[setId].collationId) {\r\n        const message = `${setInfo[setId].name} is not a draftable set`;\r\n        return (\r\n            <div id=\"notAvailable\">\r\n                <h2>{message}</h2>\r\n            </div>\r\n        );\r\n    }\r\n    // Calculate number of drafts required to complete rare/mythic collection for this set\r\n    const rareDraftsNeeded = draftsNeeded(setId, \"rare\", raresOwned, raresTotal, raresPicked, rewardPacks, ownedBoosters);\r\n    const mythicDraftsNeeded = draftsNeeded(setId, \"mythic\", mythicsOwned, mythicsTotal, mythicsPicked, rewardPacks, ownedBoosters);\r\n\r\n    // Calculate cost of drafts (include gems returned)\r\n\r\n    // Default is for traditional or premier\r\n    let rareCost =   { gold: rareDraftsNeeded*10000, gems: rareDraftsNeeded*1500 },\r\n        mythicCost = { gold: mythicDraftsNeeded*10000, gems: mythicDraftsNeeded*1500 };\r\n\r\n    if (draftType === \"quick\") {\r\n        rareCost.gold = (rareCost.gold / 2);\r\n        rareCost.gems = (rareCost.gems / 2);\r\n        mythicCost.gold = (mythicCost.gold / 2);\r\n        mythicCost.gems = (mythicCost.gems / 2);\r\n    }\r\n\r\n    const totalRareGemReward = Math.floor(rareDraftsNeeded * gems).toLocaleString();\r\n    const totalMythicGemReward = Math.floor(mythicDraftsNeeded * gems).toLocaleString();\r\n\r\n    // Callback for CustomDropdown\r\n    function selectDraftType(item) {\r\n        setDraftType(item);\r\n        window.localStorage.setItem('preferredDraftType', item);\r\n    }\r\n    // Dropdown selects draft type\r\n    const renderDropDown = (\r\n        <div className=\"drafttype-dropdown\">\r\n            {/* Dropdown menu */}\r\n            <label>Draft Type: </label>\r\n            <CustomDropdown \r\n                items={['quick', 'premier', 'traditional']} key={draftType} ariaLabel=\"Select Draft Type\"\r\n                firstSelection={draftType} selectfn={selectDraftType} \r\n            />\r\n        </div>\r\n    );\r\n    // Validation function for winRate that will keep the input between 0 and 100\r\n    function checkWinRate(value){\r\n        let valueNum = value;\r\n        if ( valueNum > 100 ) {\r\n            valueNum = 100;\r\n        } \r\n        if ( valueNum < 0 ) {\r\n            valueNum = 0;\r\n        }\r\n        return valueNum;\r\n    }\r\n\r\n    // Validation function for Rare and mythic Cards Picked during drafts. Prevents negative numbers and sets to 0.\r\n    function checkCardsPicked(value) {\r\n        let valueNum = value;\r\n        if ( valueNum < 0 ) {\r\n            valueNum = 0;\r\n        }\r\n        return valueNum;\r\n    }\r\n\r\n    // Input selects estimated win percentage\r\n    const renderWinRate = (\r\n        <div>\r\n            <label htmlFor=\"winRate\">Win Rate: </label>\r\n            <input\r\n                type=\"number\" name=\"winRate\" id=\"winRate\" min=\"0\" max=\"100\" value={debouncedWinRate}\r\n                onChange={(e) => setDebouncedWinRate(checkWinRate(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n    \r\n    // Input for average number of new rares picked during draft\r\n    const renderRaresPickedInput = (\r\n        <div>\r\n            <label htmlFor=\"raresPicked\">Rares: </label>\r\n            <input\r\n                type=\"number\" name=\"raresPicked\" id=\"raresPicked\" min=\"0\" max=\"10\" step=\"0.1\" value={debouncedRaresPicked}\r\n                onChange={(e) => setDebouncedRaresPicked(checkCardsPicked(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    // Input for average number of new mythics picked during draft\r\n    const renderMythicsPickedInput = (\r\n        <div>\r\n            <label htmlFor=\"mythicsPicked\">Mythics: </label>\r\n            <input\r\n                type=\"number\" name=\"mythicsPicked\" id=\"mythicsPicked\" min=\"0\" max=\"10\" step=\"0.1\" value={debouncedMythicsPicked}\r\n                onChange={(e) => setDebouncedMythicsPicked(checkCardsPicked(e.target.value))}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    const renderOutput = (\r\n        <div>\r\n            <hr />\r\n            <h3>Results:</h3>\r\n            <div className=\"draftsRequired\">\r\n                <div className=\"rares\">\r\n                    <h4>Collect All Rares: <span className=\"resultNumber\">{rareDraftsNeeded} Drafts</span></h4>\r\n                    <p>Cost: \r\n                        <img src={gold_img} alt=\"gold\" className=\"goldImg\"/> {(rareCost.gold).toLocaleString()} <span className=\"slash\">/</span>  \r\n                        <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {(rareCost.gems).toLocaleString()}\r\n                    </p>\r\n                    <p>\r\n                        Rewards: <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {totalRareGemReward} &#38; {Math.floor(rewardPacks * rareDraftsNeeded)} Packs\r\n                    </p>\r\n                </div>\r\n                <div className=\"mythics\">\r\n                    <h4>Collect All Mythics: <span className=\"resultNumber\">{mythicDraftsNeeded} Drafts</span></h4>\r\n                    <p>Cost: \r\n                        <img src={gold_img} alt=\"gold\" className=\"goldImg\"/> {(mythicCost.gold).toLocaleString()} <span className=\"slash\">/</span> \r\n                        <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {(mythicCost.gems).toLocaleString()}\r\n                    </p>\r\n                    <p>Rewards: <img src={gem_img} alt=\"gem\" className=\"gemImg\"/> {totalMythicGemReward} &#38; {Math.floor(rewardPacks * mythicDraftsNeeded)} Packs </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div id=\"draftsCalculator\">\r\n            <h3>Calculator Options \r\n                <a \r\n                href=\"/help?openSection=usingDraftCalculator#usingDraftCalculator\"\r\n                target=\"_blank\">\r\n                    <i className=\"info circle icon\"></i>\r\n                </a>\r\n            </h3>\r\n            <div className=\"top\">\r\n                <div className=\"typeAndWinRate\">\r\n                    {renderDropDown}\r\n                    {renderWinRate}\r\n                </div>\r\n                <p>New Cards Picked:</p>\r\n                <div className=\"cardsPicked\">\r\n                    {renderRaresPickedInput}\r\n                    {renderMythicsPickedInput}\r\n\r\n                </div>\r\n                <p>\r\n                    <ManualPacks set={setId} />\r\n                </p>\r\n            </div>\r\n            {renderOutput}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DraftsCalculator;\r\n","import { \r\n    premierGems, premierPacks, quickGems, quickPacks, traditionalGems, traditionalPacks \r\n} from '../data/draftRewards';\r\n\r\n/**\r\n * Determine average gem and pack rewards for the given win rate and draft type.\r\n * Functions are polynomial fits to Monte Carlo simulation data of drafts.\r\n * @param {*} draftType Draft type: \"premier\", \"quick\", or \"traditional\"\r\n * @param {*} winRate Decimal number between 0 and 1\r\n * @returns \\{ gems, packs }\r\n */\r\nexport default function useDraft(draftType, winRate) {\r\n    \r\n    switch (draftType) {\r\n        case \"premier\":\r\n            return { gems: premierGems(winRate), packs: premierPacks(winRate) };\r\n        case \"quick\":\r\n            return { gems: quickGems(winRate), packs: quickPacks(winRate) };\r\n        case \"traditional\":\r\n            return { gems: traditionalGems(winRate), packs: traditionalPacks(winRate) };\r\n        default:\r\n            return { gems: 0, packs: 0 };\r\n    }\r\n}","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Helper function to stop React from rerendering continuously upon window resize\r\n */\r\nfunction debounce(func, delay) {\r\n    let timer;\r\n    return (() => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null;\r\n            func.apply(this, arguments);\r\n        }, delay);\r\n    });\r\n}\r\n\r\n/**\r\n * Custom hook that returns the width of the current window upon resizing\r\n * @returns Width of current window\r\n */\r\nexport default function useResizeWidth() {\r\n    // Use local state to track window size\r\n    const [size, setSize] = useState({ width: window.innerWidth });\r\n\r\n    // useEffect adds event listener for window resize\r\n    useEffect(() => {\r\n        const debouncedResize = debounce(() => {\r\n            setSize({ width: window.innerWidth });\r\n        }, 100);\r\n\r\n        window.addEventListener('resize', debouncedResize);\r\n\r\n        // Clean up\r\n        return (() => { window.removeEventListener('resize', debouncedResize) });\r\n    }, []);\r\n\r\n    // Return new width on window resize\r\n    return size.width;\r\n}","import React, { useCallback, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Modal from '../Templates/Modal';\r\nimport { showCardModal, setCardModalContent } from '../../actions';\r\nimport useResizeWidth from '../../hooks/useResizeWidth';\r\nimport '../../css/CardModal.css';\r\n\r\nfunction CardModal() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Determine whether modal should currently be shown\r\n    const show = useSelector(state => state.modal.showCardModal);\r\n\r\n    // Destructuring from redux gets dicey, so these look kind of silly\r\n    const { index, imgSide } = useSelector(({ modal: {cardContent: content} }) => {\r\n        if (content)\r\n            return { index: content.index, imgSide: content.imgSide };\r\n\r\n        // Initial render default values\r\n        else\r\n            return { index: 0, imgSide: true };\r\n    });\r\n\r\n    const { img, imgLength } = useSelector(({ displayOptions: {imageList} }) => {\r\n        if (imageList)\r\n            return { img: imageList[index], imgLength: imageList.length };\r\n\r\n        // Initial render default values\r\n        else\r\n            return { img: null, imgLength: 0 };\r\n    });\r\n   \r\n    /**\r\n     * Move left an image in the modal when possible\r\n     */\r\n    const goLeft = useCallback(() => {\r\n        if (index > 0) {\r\n            dispatch(setCardModalContent({ index: index - 1, imgSide: true }));\r\n        }\r\n    }, [dispatch, index]);\r\n\r\n    /**\r\n     * Move right an image in the modal when possible\r\n     */\r\n    const goRight = useCallback(() => {\r\n        if (index < imgLength-1) {\r\n            dispatch(setCardModalContent({ index: index + 1, imgSide: true }));\r\n        }\r\n    }, [dispatch, index, imgLength]);\r\n\r\n    /**\r\n     * Flip card in modal.\r\n     */\r\n    const flipCard = useCallback(() => {\r\n\r\n        if (img.back) {\r\n\r\n            // Keep same card, but flip to other side\r\n            dispatch(setCardModalContent({ index, imgSide: !imgSide }));\r\n    \r\n            // Set animation for flipping action on card\r\n            imgRef.current.style.transition = \"1s\";\r\n    \r\n            // Animate flip button\r\n            if (imgSide)\r\n                flipRef.current.style.animation = \"rotate1 .6s linear\";\r\n            else\r\n                flipRef.current.style.animation = \"rotate2 .6s linear\";\r\n    \r\n            // Clear animation after short delay\r\n            setTimeout(() => {\r\n                imgRef.current.style.transition = \"0s\";\r\n            }, 100);\r\n        }\r\n\r\n    }, [dispatch, imgSide, index, img]);\r\n\r\n    // Reference DOM\r\n    const prevRef = useRef(null);\r\n    const nextRef = useRef(null);\r\n    const imgRef  = useRef(null);\r\n    const flipRef = useRef(null);\r\n\r\n    /* Hooks need to be called before checking show, so that they're not called conditionally */\r\n\r\n    const width = useResizeWidth();\r\n    \r\n    // Return nothing when modal not shown or if screensize too small\r\n    if (!show || width < 527) {\r\n        return null;\r\n    }\r\n\r\n    // Basic button classes for semantic ui. Additional class added when button disabled\r\n    const BUTTON_CLASS = \"massive basic ui icon button\";\r\n\r\n    // Close modal button\r\n    const exit = (\r\n        <button\r\n            className={`exit ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"close icon\"/>\r\n        </button>\r\n    );\r\n\r\n    // \"Go to previous card\" button to be rendered inside modal\r\n    const prev = (\r\n        <button\r\n            aria-label=\"Previous Card\" title=\"Previous Card\" aria-keyshortcuts=\"ArrowLeft\"\r\n            ref={prevRef} disabled={index <= 0}\r\n            // Update image to display if possible\r\n            onClick={() => {\r\n                \r\n                // Move left\r\n                goLeft();\r\n\r\n                // Clear focus after going to next image\r\n                prevRef.current.blur();\r\n            }}\r\n            // Add \"disabled\" to class if not clickable (first image in list)\r\n            className={index > 0 ? BUTTON_CLASS : `disabled ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"chevron left icon\"></i>\r\n        </button>\r\n    );\r\n\r\n    // \"Go to next card\" button to be rendered inside modal\r\n    const next = (\r\n        <button\r\n        aria-label=\"Next Card\" title=\"Next Card\" aria-keyshortcuts=\"ArrowRight\"\r\n        ref={nextRef} disabled={index >= imgLength-1}\r\n            // Update image to display if possible\r\n            onClick={() => {\r\n\r\n                // Move right\r\n                goRight();\r\n\r\n                // Clear focus after going to next image\r\n                nextRef.current.blur();\r\n            }}\r\n            // Add \"disabled\" to class if not clickable (first image in list)\r\n            className={index < imgLength-1 ? BUTTON_CLASS : `disabled ${BUTTON_CLASS}`}\r\n        >\r\n            <i className=\"chevron right icon\"></i>\r\n        </button>\r\n    );\r\n\r\n    // Only double-sided cards will have two images, otherwise create one if the image is initialized\r\n    let cardImage = <img src={img.front} alt=\"modal card\"/>;\r\n    let flipButton = null; // Regular cards don't have a flip button\r\n\r\n    // Flip button for double-sided cards\r\n    if (img.back) {\r\n\r\n        flipButton = (\r\n            <button\r\n                aria-label=\"Flip Card\" title=\"Flip Card\" aria-keyshortcuts=\"Space\"\r\n                className=\"circular ui icon button flipButton\"\r\n                onClick={(event) => {\r\n\r\n                    // Prevent any additional actions when clicking over image\r\n                    event.stopPropagation();\r\n\r\n                    // Keep same card, but flip to other side\r\n                    flipCard();\r\n                }}\r\n            >\r\n                <i className=\"undo icon\" id=\"flipButton\" ref={flipRef} />\r\n            </button>\r\n        );\r\n\r\n        // One image will be hidden\r\n        cardImage = (\r\n\r\n            // Add flipped class when back image shown\r\n            <div id=\"modalImage\" className={imgSide? \"\" : \"flipped\"} ref={imgRef} >\r\n                <img src={img.front} alt=\"modal card front\" className=\"cardImg\" />\r\n                <img src={img.back}  alt=\"modal card back\"  className=\"backside\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Compose all modal content\r\n    const renderedContent =\r\n    <>\r\n        {/* Exit button */}\r\n        <div\r\n            className=\"modalClose\"\r\n            onClick={() => dispatch(showCardModal(false))}\r\n        >\r\n            {exit}\r\n        </div>\r\n\r\n        <div className=\"modalContent\">\r\n            \r\n            {/* Previous button */}\r\n            <div className=\"backButton\">\r\n                {prev}\r\n            </div>\r\n\r\n            {/* Current card image and flip button */}\r\n            <div className=\"cardImage\">\r\n                {cardImage}\r\n                {flipButton}\r\n            </div>\r\n\r\n            {/* Next button */}\r\n            <div className=\"forwardButton\">\r\n                {next}\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n    // Create keyEvents Object to be passed to Modal; set key and function\r\n    const keyEvents = [\r\n\r\n        // Left Arrow pressed --> go left (-1 to index unless at start)\r\n        { keys: [37], keyFunction: goLeft },\r\n\r\n        // Right Arrow pressed --> go right (+1 to index unless at end)\r\n        { keys: [39], keyFunction: goRight },\r\n\r\n        // Space bar pressed --> Flip card if possible\r\n        { keys: [32], keyFunction: flipCard }\r\n    ];\r\n\r\n    // Render Modal\r\n    return (\r\n        <Modal content={renderedContent} keyEvents={keyEvents} show={show} setShow={(val) => dispatch(showCardModal(val))}/>\r\n    );\r\n}\r\n\r\nexport default CardModal;","import React from 'react';\r\n\r\nimport U from '../../images/color_imgs/U.svg';\r\nimport G from '../../images/color_imgs/G.svg';\r\nimport '../../css/PageNotFound.css';\r\n\r\nfunction SetNotFound() {\r\n    return (\r\n        <div className=\"pageNotFound\">\r\n            <img src={U} alt=\"Blue\" />\r\n            <h1>404 Set Not Found</h1>\r\n            <img src={G} alt=\"Green\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetNotFound;","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport CardList from '../All/CardList';\r\nimport RarityCollectionItem from '../All/RarityCollectionItem';\r\nimport SetDetailsMenu from './SetDetailsMenu';\r\nimport DisplayOptions from './DisplayOptions';\r\nimport PacksCalculator from './PacksCalculator';\r\nimport DraftsCalculator from './DraftsCalculator';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport CardModal from './CardModal';\r\nimport SetNotFound from '../All/SetNotFound.js';\r\nimport useResizeWidth from '../../hooks/useResizeWidth';\r\nimport '../../css/SetDetails.css';\r\n\r\nfunction SetDetails() {\r\n\r\n    // Always start from the top of a set\r\n    useEffect(() => {\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n    }, []);\r\n\r\n    // Get set Id from url\r\n    const { setId } = useParams();\r\n\r\n    // Get current screen width\r\n    const width = useResizeWidth();\r\n\r\n    // Get active tab from redux\r\n    const activeTab = useSelector(state => state.displayOptions.activeTab);\r\n\r\n    /*\r\n     * Calculate totals from redux state \r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set && set[setId]) {\r\n            // Sum the total cards owned\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].ownedTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set && set[setId]) {\r\n            // Sum the total cards in the set\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].setTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    // Check if set exists\r\n    if (!setInfo[setId]) {\r\n        \r\n        // Return error page if set doesn't exist\r\n        return <SetNotFound/>;\r\n    }\r\n\r\n    // Calculate and round percent owned\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n    const setName = setInfo[setId].name;\r\n\r\n    // Determine active tab and resulting component to display\r\n    const activeTabComponent = (() => {\r\n\r\n        switch (activeTab) {\r\n            case 'Card Filters':\r\n                return <DisplayOptions />;\r\n            case 'Packs':\r\n                return <PacksCalculator />;\r\n            case 'Drafts':\r\n                return <DraftsCalculator />;\r\n            default:\r\n                return null;\r\n        }\r\n    })();\r\n\r\n    // Break up set details and display options at small width\r\n    let setDetailsColumns = \"six\";\r\n    let displayOptionsColumns = \"ten\";\r\n\r\n    if (width < 740) {\r\n        setDetailsColumns = \"sixteen\";\r\n        displayOptionsColumns = \"sixteen\";\r\n    }\r\n\r\n    let detailsHeader = <div className=\"ui center aligned header\">{setName}</div>\r\n    if ( setInfo[setId].logo ) {\r\n        detailsHeader = <div className=\"ui center aligned header\">\r\n                <img src={setInfo[setId].logo} alt={setName} aria-label={setName} title={setName}/>\r\n            </div>\r\n    }\r\n    return (<>\r\n        {/* Card modal is only shown when a card is clicked */}\r\n        <CardModal/>\r\n\r\n        <div className=\"ui grid container\" id=\"setDetailsSpacer\">\r\n\r\n            {/* Set Details */}\r\n            <div className={`${setDetailsColumns} wide column`}>\r\n                {detailsHeader}\r\n                <div className=\"ui center aligned sub header\">\r\n                    Set Progress:\r\n                    &nbsp; &nbsp; &nbsp; {/* Spacers */}\r\n                    <span>{ownedTotal} / {setTotal} ({percentOwned}%)</span>\r\n                </div>\r\n\r\n                <div className=\"ui middle aligned list\">\r\n                    <RarityCollectionItem setId={setId} rarity=\"mythic\" />                    \r\n                    <RarityCollectionItem setId={setId} rarity=\"rare\" />\r\n                    <RarityCollectionItem setId={setId} rarity=\"uncommon\" />\r\n                    <RarityCollectionItem setId={setId} rarity=\"common\"/>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display options for SetDetails */}\r\n            <div className={`${displayOptionsColumns} wide column`}>\r\n                <SetDetailsMenu />\r\n                {activeTabComponent}\r\n            </div>\r\n        </div>\r\n        \r\n        <hr className=\"lineBreak\"/>\r\n\r\n        {/* Cards matching display options */}\r\n        <CardList setId={setId}/>\r\n    </>);\r\n    \r\n}\r\n\r\nexport default SetDetails;","import React, { useEffect, useRef } from 'react';\r\n\r\nimport '../../css/ProgressBar.css'\r\n\r\nfunction ProgressBar({percent, innerClass}) {\r\n    // Make a reference to the inner portion of the progress bar\r\n    const innerRef = useRef();\r\n\r\n    useEffect(()=> {\r\n        innerRef.current.style.width = `${percent}%`;\r\n\r\n    },[percent])\r\n\r\n    return (\r\n        <div className=\"progress-outer\">\r\n            <div className={`progress-inner ${innerClass}`} ref ={innerRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ProgressBar from './ProgressBar';\r\nimport '../../css/RarityCollectionItem.css';\r\n\r\n/**\r\n * Component that contains details about how many cards are owned from a specific set of a specific rarity\r\n * @param {*} setId\r\n * @param {*} rarity\r\n */\r\nfunction RarityCollectionItem({ setId, rarity }) {\r\n\r\n    /*\r\n     * Extract multiple values from redux state\r\n     * - Multiple calls to useSelector used to avoid needing to memoize redux state\r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].ownedTotal;\r\n        \r\n        // else no cards found\r\n        return 0;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].setTotal;\r\n    });\r\n\r\n    // Calculate percent of cards owned (to one decimal) from specified set of specified rarity\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n\r\n    let symbol = setId;\r\n    // Replace some set symbols with another (e.g. give all Historic Anthologies the HA1 symbol)\r\n    if (setId.slice(0, 2) === 'ha') {\r\n        symbol = 'ha1'\r\n    }\r\n    if (setId.length === 4 && setId[0] === 'y') {\r\n        symbol = 'y22'\r\n    }\r\n\r\n    // If there are no cards of this rarity, don't show a progress bar for this rarity\r\n    if (setTotal === 0) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className=\"item \" id=\"collectionItem\" >\r\n            <div className=\"rarityContainer\">\r\n\r\n                <div className=\"rarityText\">\r\n                    <i className={`ss ss-${symbol} ss-${rarity} ss-fw mtgIcon`}/>\r\n                    &nbsp; {/* Force a non-CSS space between icon and text */}\r\n                    {rarity}\r\n                </div>\r\n\r\n                <div className=\"rarityNumber\">\r\n                    <span>{`${ownedTotal} / ${setTotal} (${percentOwned}%)`}</span>\r\n                </div>\r\n            </div>\r\n            <ProgressBar percent={percentOwned} innerClass={rarity}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RarityCollectionItem;"],"sourceRoot":""}