{"version":3,"sources":["components/DeckBuilder/SelectSet.js","components/DeckBuilder/AdvancedOptions.js","components/DeckBuilder/AddBasicsButton.js","components/DeckBuilder/DBCardFilters.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/DeckBuilder/ExportDeck.js","data/getDeckCard.js","components/DeckBuilder/ImportDeck.js","components/DeckBuilder/ImportExportModal.js","components/DeckBuilder/DBDeckOptions.js","components/DeckBuilder/DBSidebar.js","components/DeckBuilder/DeckHeader.js","components/DeckBuilder/DBDeck.js","components/DeckBuilder/DBSideboard.js","components/DeckBuilder/LimitedSideboard.js","components/DeckBuilder/DeckBuilder.js"],"names":["SelectSet","dispatch","useDispatch","reduxSets","useSelector","state","displayOptions","set","key","resetCount","options","setId","setInfo","newObj","text","name","val","push","className","MultiSelect","useValForSelected","noneSelectedText","selectedFn","sets","selectSet","initialSelected","AdvancedOptions","useState","modalOpen","setModalOpen","rarity","showCards","booster","cmcs","searchType","cardTypes","inUse","length","Object","values","includes","modalContent","onClick","SearchBar","RarityButtons","header","ColorCheckboxes","NumberOwnedDropdown","BoosterDropdown","CMCDropdowns","CardTypeDropdown","Reset","renderedModal","Modal","content","show","setShow","title","AddBasicsButton","deckBuilder","addBasics","addType","addBasicsClass","e","setAddType","toggleAddBasics","DBCardFilters","advanced","_typeof","obj","Symbol","iterator","constructor","prototype","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","ExportDeck","deckMap","sideboardMap","commander","companion","saveClipboard","setSaveClipboard","saveFile","setSaveFile","toString","useMemo","deckOutput","deck_sideboardOutput","commander_companionOutput","inputMap","faceSeparator","entries","ids","substring","indexOf","card","test","collector_number","copies","toUpperCase","deckString","suggestedName","Date","toISOString","replace","types","description","accept","window","showSaveFilePicker","fileLocation","createWritable","write","close","id","navigator","clipboard","writeText","getDeckCard","matches","toLowerCase","arenaCards","card_faces","ImportDeck","importedText","setImportedText","cardCollection","inventory","pickCardsFromMatches","number","temp","type_line","standardSets","match","numOwned","arenaId","sort","a","b","numNeeded","getCards","deckStringsArray","regex4","regex3","regex2","sectionCards","line","cards","parseInt","showOpenFilePicker","file","getFile","onChange","target","spellCheck","readText","lines","trim","split","deckStrings","sideboardStrings","deck","sideboard","createSections","deckCardsToAdd","sideboardCardsToAdd","concat","setDeck","setSideboard","changeCommander","changeCompanion","ImportExportModal","isImport","setIsImport","DBDeckOptions","deckType","labels","renderGameType","CustomDropdown","items","firstSelection","selectfn","item","selectDeckType","ariaLabel","clearButton","flat","htmlFor","DBSidebar","onDragEnter","setCurrentDragOver","DeckHeader","deckOrSideboard","useEffect","sideboardCount","deckCount","landCount","partialLandCount","creatureCount","nonCreatureCount","sides","frontType","backtype","partialLandSpan","toggle","event","stopPropagation","addToggle","tabIndex","onKeyDown","onMouseDown","role","checked","readOnly","setComType","setComButton","buttonText","style","filter","comButtons","DBDeck","currentDragOver","renderCards","addedToDeck","map","column","colClass","section","col","draggable","onDragOver","preventDefault","onDrop","dropCard","row","j","cardStyle","legalities","boxShadow","borderRadius","transform","zIndex","HoverPreview","imgs","src","front","alt","onDragStart","setDragCard","onDragEnd","removeCardFromDeck","addCardToSideboard","commander_companion","DBSideboard","open","setOpen","renderSBCards","sbCounter","removeCardFromSideboard","iconClass","sideboardClass","showButton","SideboardColumn","cardArray","colors","searchTerm","cmc","rarityOptions","option","searchCardTypes","cardType","searchcmc","min","max","renderColumn","searchOptions","color","term","advancedSearchType","cardList","findCards","addCardToDeck","moveToDeck","LimitedSideboard","limitedSort","DeckBuilder","cardListRef","useRef","dbCardList","CardList","scrollingParent","ref","mouseHeight","clientY","current","overflowY","marginRight","document","onmousemove","height","offsetHeight","onmouseup","MoveSlider"],"mappings":"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","file":"static/js/5.faf8b3d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport MultiSelect from '../Templates/MultiSelect';\r\nimport { setInfo } from '../../data/setInfo';\r\nimport { selectSet } from '../../actions';\r\nimport '../../css/SelectSet.css';\r\n\r\n/**\r\n * Uses MultiSelect to create a multiSelectible dropdown for selecting sets to search\r\n * @returns JSX \r\n */\r\nfunction SelectSet() {\r\n    const dispatch = useDispatch();\r\n    \r\n    // Get current state of sets selected from Redux\r\n    const reduxSets = useSelector(state => state.displayOptions.set);\r\n    // Use Reset count as a key to rerender component when the reset button is hit\r\n    const key = useSelector(state => state.displayOptions.resetCount);   \r\n\r\n    // Create the options for the multiSelect menu\r\n    // Each option is an object with text and val properties\r\n    let options = [];\r\n    for (const setId in setInfo) {\r\n        let newObj = {};\r\n        newObj.text = setInfo[setId].name;\r\n        newObj.val = setId;\r\n        options.push(newObj);\r\n    }\r\n\r\n    return (\r\n        <div className=\"selectSet\">\r\n            <label >Select Set(s): </label>\r\n            <MultiSelect \r\n                options={options} \r\n                useValForSelected noneSelectedText=\"All Sets\"\r\n                selectedFn={(sets) => dispatch(selectSet(sets))}\r\n                initialSelected = {reduxSets}\r\n                key={key}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectSet;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Modal from '../Templates/Modal';\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport ColorCheckboxes from '../SetDetails/ColorCheckboxes';\r\nimport RarityButtons from '../SetDetails/RarityButtons';\r\nimport NumberOwnedDropdown from '../SetDetails/NumberOwnedDropdown';\r\nimport BoosterDropdown from '../SetDetails/BoosterDropdown';\r\nimport CMCDropdowns from '../SetDetails/CMCDropdowns';\r\nimport SelectSet from './SelectSet';\r\nimport CardTypeDropdown from '../SetDetails/CardTypeDropdown';\r\nimport Reset from '../SetDetails/Reset';\r\nimport '../../css/AdvancedOptions.css';\r\n\r\n/**\r\n * The advanced options button and its modal\r\n * @returns JSX for the button and modal\r\n */\r\nfunction AdvancedOptions() {\r\n\r\n    // Advanced options modal is open/closed\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const { rarity, showCards, booster, set, cmcs, searchType, cardTypes} = useSelector(state => state.displayOptions);\r\n\r\n    // Boolean for if advanced Options are being used\r\n    let inUse = false;\r\n    // Check if any of the advanced Options are not their defaults\r\n    if (showCards !== 'Show All Cards' || booster !=='Show All Cards' || set.length > 0 || cardTypes.length > 0 || searchType !== null ||\r\n        Object.values(rarity).includes(true) || cmcs.length > 0\r\n    ) {\r\n        inUse = true;\r\n    }\r\n\r\n    // JSX in the modal --> only viewable if modalOpen is true\r\n    const modalContent = ( \r\n        <div className=\"advancedOptionsModal darkMode\">\r\n            <div className=\"closeModalButton\">\r\n                <button onClick={() => setModalOpen(!modalOpen)}><i className=\"close icon\"></i></button>\r\n\r\n            </div>\r\n            <div>\r\n                <SearchBar />\r\n                <div className=\"advancedOptionsSection\">\r\n                    <RarityButtons header=\"Select Rarity/Rarities to Show:\"  />\r\n                    <ColorCheckboxes header=\"Select Color/Colors to Show:\" />\r\n                </div>\r\n                <div className=\"advancedOptionsSection\">\r\n                    <NumberOwnedDropdown header=\"Number You Own:\"/>\r\n                    <BoosterDropdown header=\"In Booster Packs?\"  />\r\n                    <CMCDropdowns header=\"Select Mana Costs:\"/>\r\n                </div>\r\n                <div className=\"advancedOptionsSection\">\r\n                    <SelectSet />\r\n                    <CardTypeDropdown />\r\n                    <Reset />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n    // If moddalOpen is true --> render the modal, false --> null\r\n    const renderedModal = modalOpen ? <Modal content={modalContent} show={modalOpen} setShow={setModalOpen} /> : null;\r\n\r\n    return (\r\n        <> \r\n        {/* Add inUse flag to class if some option ONLY in advanced options is being used */}\r\n            <button className={inUse ? 'advancedOptionsButton inUse': 'advancedOptionsButton'} onClick={() => setModalOpen(!modalOpen)}\r\n            title=\"Advanced Options\"\r\n            >\r\n                <i className=\"icon cogs\"></i>\r\n            </button>\r\n            {renderedModal}            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default AdvancedOptions;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { toggleAddBasics, setAddType } from '../../actions';\r\n\r\n// CSS for this component will be in DBCardFilters.css\r\n/**\r\n * The button that toggles adding basic lands to a deck\r\n * @returns JSX\r\n */\r\nfunction AddBasicsButton() {\r\n    const dispatch = useDispatch();\r\n    const { addBasics, addType } = useSelector(state => state.deckBuilder);\r\n\r\n    let addBasicsClass = \"addBasics\";\r\n    if (addBasics) addBasicsClass += \" active\";\r\n\r\n    return (\r\n        <button className={addBasicsClass}\r\n        onClick={(e)=> {\r\n\r\n            // Check if addType is either commander or companion\r\n            if (addType === \"commander\" || addType === \"companion\") {\r\n                dispatch(setAddType(\"deck\"));\r\n            }\r\n\r\n            dispatch(toggleAddBasics())\r\n        }}\r\n        >\r\n            Add Basic Lands\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default AddBasicsButton;","import React from 'react';\r\n\r\nimport SearchBar from '../Templates/SearchBar';\r\nimport ColorCheckboxes from '../SetDetails/ColorCheckboxes';\r\nimport AdvancedOptions from './AdvancedOptions';\r\nimport Reset from '../SetDetails/Reset';\r\nimport AddBasicsButton from './AddBasicsButton';\r\nimport '../../css/DBCardFilters.css';\r\n\r\n/**\r\n * The Card filters for DBSidebar\r\n * @returns JSX for card filtering options\r\n */\r\nfunction DBCardFilters() {\r\n    return (\r\n        <div className=\"DBCardFilters\">\r\n            <SearchBar advanced={false}/>\r\n            <ColorCheckboxes header=\"Select Color/Colors to Show:\" />\r\n            <AddBasicsButton />\r\n            <div className=\"advancedAndReset\">\r\n                <AdvancedOptions />\r\n                <Reset />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBCardFilters;\r\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n      return ContinueSentinel;\n    }\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) {\n              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            }\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import React, { useState, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * The content in the export modal. Contains a preview of the exported deck, save to file button,\r\n * and copy to clipboard button.\r\n */\r\nfunction ExportDeck({ setModalOpen }) {\r\n\r\n    const { deckMap, sideboardMap, commander, companion } = useSelector(state => state.deckBuilder);\r\n\r\n    const [saveClipboard, setSaveClipboard] = useState(\"Copy to Clipboard\");\r\n    const [saveFile,      setSaveFile]      = useState(\"Save to File\");\r\n\r\n    /**\r\n     * Iteratively build deck string output\r\n     */\r\n    const toString = useMemo(() => {\r\n        let deckOutput = '';\r\n        \r\n        // Add deck\r\n        if (Object.keys(deckMap).length) {\r\n            deckOutput += 'Deck\\n';\r\n\r\n            deckOutput += deck_sideboardOutput(deckMap);\r\n        }\r\n\r\n        // Add sideboard\r\n        if (Object.keys(sideboardMap).length) {\r\n            deckOutput += '\\nSideboard\\n';\r\n\r\n            deckOutput += deck_sideboardOutput(sideboardMap);\r\n        }\r\n\r\n        // Add commander\r\n        if (commander) {\r\n            deckOutput += '\\nCommander\\n';\r\n            deckOutput += commander_companionOutput(commander);\r\n        }\r\n\r\n        // Add companion\r\n        if (companion) {\r\n            deckOutput += '\\nCompanion\\n';\r\n            deckOutput += commander_companionOutput(companion);\r\n        }\r\n\r\n        return deckOutput;\r\n    }, [commander, companion, deckMap, sideboardMap]);\r\n\r\n    /**\r\n     * Gets string for deckMap and sideboardMap\r\n     */\r\n    function deck_sideboardOutput(inputMap) {\r\n        const faceSeparator = \" // \";\r\n\r\n        let deckOutput = '';\r\n\r\n        // Iterate through each card name in imputMap\r\n        for (let [name, ids] of Object.entries(inputMap)) {\r\n\r\n            // Only use front face if double-sided\r\n            if (name.includes(faceSeparator)) {\r\n                name = name.substring(0, name.indexOf(faceSeparator));\r\n            }\r\n            \r\n            // Iterate through each arenaId of that card name and add it to deckOutput string\r\n            for (const card of Object.values(ids)) {\r\n\r\n                // Only list number and name for sets with 4+ letter set codes, or collector numbers\r\n                // with letters, because the game doesn't import them correctly\r\n                if (card.set.length > 3 || /.*[A-Za-z].*/.test(card.collector_number)) {\r\n\r\n                    // Ex output: 4 Llanowar Elves\r\n                    deckOutput += `${card.copies} ${name}\\n`;\r\n                }\r\n\r\n                else {\r\n                    \r\n                    // Ex output: 4 Clearwater Pathway (ZNR) 260\r\n                    deckOutput += `${card.copies} ${name} (${card.set.toUpperCase()}) ${card.collector_number}\\n`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return deckOutput;\r\n    }\r\n\r\n    /**\r\n     * Get string for commander and/or companion\r\n     */\r\n    function commander_companionOutput(card) {\r\n\r\n        let deckOutput = '';\r\n\r\n        if (card.set.length > 3 || /.*[A-Za-z].*/.test(card.collector_number)) {\r\n            deckOutput += `1 ${card.name}\\n`;\r\n        }\r\n\r\n        else {\r\n            deckOutput += `1 ${card.name} (${card.set.toUpperCase()}) ${card.collector_number}\\n`;\r\n        }\r\n\r\n        return deckOutput;\r\n    }\r\n\r\n    /**\r\n     * Copies deck to clipboard\r\n     */\r\n    function toClipboard() {\r\n        const deckString = toString;\r\n\r\n        // Write deck to clipboard\r\n        navigator.clipboard.writeText(deckString).then(() => {\r\n\r\n            // Update button text\r\n            setSaveClipboard(\"Copied!\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves deck to txt file\r\n     */\r\n    async function toFile() {\r\n\r\n        try {\r\n            // Get deck as a string\r\n            const deckString = toString;\r\n    \r\n            // Get location to save file from user\r\n            const options = {\r\n                suggestedName: `deck_${new Date().toISOString().replace(/\\..+/g, \"\").replace(/[T:-]/g, \"\")}.txt`,\r\n                types: [{ description: 'Text Files', accept: {'text/plain': ['.txt']} }]\r\n            };\r\n            const fileLocation = await window.showSaveFilePicker(options);\r\n    \r\n            // Create a FileSystemWritableFileStream to write to.\r\n            const writable = await fileLocation.createWritable();\r\n    \r\n            // Write the deckString to the stream.\r\n            await writable.write(deckString);\r\n    \r\n            // Close the file and write the contents to disk.\r\n            await writable.close();\r\n    \r\n            // Update button text\r\n            setSaveFile(\"Saved!\");\r\n            \r\n        } catch (error) {\r\n\r\n            // Update button text\r\n            setSaveFile(\"Did not Save\");\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div id=\"importExportContent\">\r\n            <div className=\"spacedModalHeader\">\r\n\r\n                <div className=\"invisible closeButtonSpacer\"/>\r\n\r\n                <h1>Import Deck</h1>\r\n\r\n                <div className=\"closeModalButton\">\r\n                    <button onClick={() => setModalOpen(false)}><i className=\"close icon\"/></button>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Preview:</h3>\r\n            <p id=\"deckPreview\">{toString}</p>\r\n\r\n            <div id=\"fileOrClipboardButtons\">\r\n\r\n                <button onClick={toFile}>\r\n                    {saveFile}\r\n                </button>\r\n\r\n                <button onClick={toClipboard}\r\n                >\r\n                    {saveClipboard}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExportDeck;\r\n","import arenaCards from \"./arenaCards\";\r\n\r\n/**\r\n * Returns an array of cards matching the specified parameters. If name only is specified, the array contains all matching\r\n * cards (if multiple versions exist). If set and collector number are specified, then the array will contain one matching\r\n * card. Returns an empty array if no matches found.\r\n * \r\n * @param {string} name The card name (not case sensitive). Fallback for no match from set and collector_number.\r\n * @param {string} set (Optional) The three-letter set code for the card (not case sensitive).\r\n * @param {number} collector_number (Optional) The collector number for the specific card set.\r\n * @returns {array} An array of matching cards.\r\n */\r\nfunction getDeckCard(name, set=null, collector_number=null) {\r\n\r\n    // Matches to return. Global so getDeckCard and addCard have access\r\n    let matches = [];\r\n\r\n    // Convert name and set code to lowercase for searching\r\n    name = name.toLowerCase();\r\n    set = set ? set.toLowerCase() : null;\r\n    \r\n    if (typeof collector_number === \"number\") {\r\n        collector_number = collector_number.toString();\r\n    }\r\n\r\n    // Check if looking for specific card (set and collector_number specified)\r\n    if (set && collector_number) {\r\n\r\n        // Search allArenaCards array for a single match\r\n        for (const card of arenaCards) {\r\n            \r\n            // Find single matching card\r\n            if (card.set === set && card.collector_number === collector_number) {\r\n                \r\n                // Add card to matches\r\n                matches.push(card);\r\n\r\n                // Don't look for additional matches\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Looking for specific set, but no collector number known\r\n    else if (set) {\r\n\r\n        // Search allArenaCards array for a single match\r\n        for (const card of arenaCards) {\r\n            \r\n            // Find single matching card\r\n            if ( (card.name.toLowerCase() === name || (card.card_faces && card.card_faces[0].name.toLowerCase() === name))\r\n                && (card.set === set) )\r\n            {\r\n                // Add card to matches\r\n                matches.push(card);\r\n\r\n                // Don't look for additional matches\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Fallback search for all name matches (either set and collector number unspecified, or yielded no results)\r\n    if (matches.length === 0) {\r\n\r\n        // Search allArenaCards array for all name matches\r\n        for (const card of arenaCards) {\r\n            \r\n            // Check card name and check front side name if double-faced card\r\n            if ( card.name.toLowerCase() === name || (card.card_faces && card.card_faces[0].name.toLowerCase() === name) ) {\r\n                \r\n                // Add card to matches\r\n                matches.push(card);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return array of matching cards\r\n    return matches;\r\n}\r\n\r\nexport default getDeckCard;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport getDeckCard from '../../data/getDeckCard';\r\nimport { standardSets } from '../../data/setInfo';\r\nimport { setDeck, setSideboard, changeCommander, changeCompanion } from '../../actions';\r\n\r\n// If adding lands, unless specific card requested, add version of land from most recent set\r\nfunction ImportDeck({ setModalOpen }) {\r\n\r\n    const [importedText, setImportedText] = useState(\"\");\r\n\r\n    const cardCollection = useSelector(state => state.inventory.cardCollection);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function onSubmit() {\r\n        const { deck, sideboard, commander: [commander], companion: [companion] } = createSections();\r\n        \r\n        let deckCardsToAdd = [], sideboardCardsToAdd = [];\r\n\r\n        // Get array of deck cards to add\r\n        for (const { number, matches } of deck) {\r\n            deckCardsToAdd = deckCardsToAdd.concat(pickCardsFromMatches(number, matches));\r\n        }\r\n        \r\n        // Get array of sideboard cards to add\r\n        for (const { number, matches } of sideboard) {\r\n            sideboardCardsToAdd = sideboardCardsToAdd.concat(pickCardsFromMatches(number, matches));\r\n        }\r\n\r\n        // Update redux\r\n        dispatch(setDeck(deckCardsToAdd));\r\n        dispatch(setSideboard(sideboardCardsToAdd));\r\n        dispatch(changeCommander(commander));\r\n        dispatch(changeCompanion(companion));\r\n\r\n        // Close modal\r\n        setModalOpen(false);\r\n    }\r\n\r\n    /**\r\n     * Parses imported strings, finds matching cards, and returns those sections\r\n     */\r\n    function createSections() {\r\n\r\n        try {\r\n\r\n            // Splitting lines by \"\\r\\n\" or \"\\n\" (removing whitespace from beginning and end)\r\n            const lines = importedText.trim().split(/\\r?\\n/);\r\n\r\n            /* \r\n                Handles either all names sections: \"Deck\", \"Sideboard\", \"Commander\", & \"Companion\" \r\n                or all unnamed sections, and assumes deck is first, followed by sideboard\r\n            */\r\n            let deckStrings = [], sideboardStrings = [], commander = [], companion = [], deck = [], sideboard = [];\r\n\r\n            // Handles the start of sections, inner loops handle the sections themselves\r\n            for (let i=0; i<lines.length; i++) {\r\n                \r\n                // Normalize line by trimming excess space and converting to lowercase\r\n                let line = lines[i].toLowerCase().trim();\r\n\r\n                // Commander\r\n                if (line === \"commander\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n\r\n                    // Get the corresponding card for that line\r\n                    const temp = getCards([ lines[i].toLowerCase().trim() ]);\r\n                    commander = temp[0].matches;\r\n                }\r\n\r\n                // Companion\r\n                else if (line === \"companion\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n\r\n                    // Get the corresponding card for that line\r\n                    const temp = getCards([ lines[i].toLowerCase().trim() ]);\r\n                    companion = temp[0].matches;\r\n                }\r\n\r\n                // Deck\r\n                else if (line === \"deck\") {\r\n                        \r\n                    // Get following line\r\n                    i++;\r\n                    line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n\r\n                    // Add lines to deck until either an empty line or the end of lines is reached\r\n                    while (line !== \"\" && i !== lines.length) {\r\n\r\n                        // Add line to deck array\r\n                        deckStrings.push(line);\r\n\r\n                        // Get next line\r\n                        i++;\r\n                        line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                    }\r\n\r\n                    // Get the deck cards\r\n                    deck = getCards(deckStrings);\r\n                }\r\n\r\n                // Sideboard\r\n                else if (line === \"sideboard\") {\r\n\r\n                    // Get following line\r\n                    i++;\r\n                    line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n\r\n                    // Add lines to sideboard until either an empty line or the end of lines is reached\r\n                    while (line !== \"\" && i !== lines.length) {\r\n\r\n                        // Add line to sideboard array\r\n                        sideboardStrings.push(line);\r\n\r\n                        // Get next line\r\n                        i++;\r\n                        line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                    }\r\n\r\n                    // Get the sideboard cards\r\n                    sideboard = getCards(sideboardStrings);\r\n                }\r\n\r\n                // Skip empty lines\r\n                else if (line === \"\") {\r\n                    continue;\r\n                }\r\n\r\n                // Otherwise assume there's no header for this section\r\n                else {\r\n\r\n                    // First line with no header is treated as deck\r\n                    if (i === 0) {\r\n\r\n                        // Add lines to deck until either an empty line or the end of lines is reached\r\n                        while (line !== \"\" && i !== lines.length) {\r\n\r\n                            // Add line to deck array\r\n                            deckStrings.push(line);\r\n\r\n                            // Get next line\r\n                            i++;\r\n                            line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                        }\r\n\r\n                        // Get the deck cards (redefine if already exists)\r\n                        deck = getCards(deckStrings);\r\n                    }\r\n\r\n                    // If not first line, section with no header is treated as sideboard\r\n                    else {\r\n\r\n                        // Add lines to sideboard until either an empty line or the end of lines is reached\r\n                        while (line !== \"\" && i !== lines.length) {\r\n\r\n                            // Add line to sideboard array\r\n                            sideboardStrings.push(line);\r\n\r\n                            // Get next line\r\n                            i++;\r\n                            line = lines[i] ? lines[i].toLowerCase().trim() : \"\";\r\n                        }\r\n\r\n                        // Get the sideboard cards\r\n                        sideboard = getCards(sideboardStrings);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return { deck, sideboard, commander, companion };\r\n\r\n        } catch (error) {\r\n\r\n            setImportedText(\"Sorry, there was an error importing that file.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempt to choose only owned cards from possible matches. If not enough copies are owned, chooses duplicates\r\n     * of most-owned version to make up the deficit.\r\n     * \r\n     * @param {number} number The number of requested copies of this card.\r\n     * @param {array} matches The possible cards to pick from. An array of card objects.\r\n     * @returns {array} An array of cards chosen from {matches} of length {number}. Preferentially picks cards that\r\n     * the user owns more copies of; will return only owned cards if possible.\r\n     */\r\n    function pickCardsFromMatches(number, matches) {\r\n\r\n        const temp = []; // Return array\r\n\r\n        // Return empty array when no matches found\r\n        if (number < 1 || matches.length === 0) {\r\n            // Do nothing here; return empty array\r\n        }\r\n\r\n        // If there's only one match, return array with {number} of requested cards\r\n        else if (matches.length === 1) {\r\n\r\n            // Push {number} of matches into return array\r\n            for (let i=0; i<number; i++) {\r\n                temp.push({ ...matches[0] });\r\n            }\r\n        }\r\n\r\n        // If a basic land is requested, but no specific land, use most recent set\r\n        else if (matches[0].type_line.toLowerCase().includes(\"basic\") && \r\n                 matches[0].type_line.toLowerCase().includes(\"land\"))\r\n        {\r\n            // Use first entry from standard sets to find the correct land to add\r\n            const [ card ] = getDeckCard(matches[0].name, standardSets[0]);\r\n\r\n            // Grab number requested of basic lands\r\n            for (let i=0; i<number; i++) {\r\n                temp.push(card);\r\n            }\r\n        }\r\n\r\n        // If there are multiple matches, determine how many copied the user has of each, sort list in descending\r\n        // order, and try to return cards the user already owns\r\n        else {\r\n\r\n            // Get the number of copies the user owns and add that property to each match\r\n            for (const match of matches) {\r\n\r\n                // Set to 0 if none owned\r\n                const numOwned = cardCollection && cardCollection[match.arenaId] ? cardCollection[match.arenaId]: 0;\r\n                match.numOwned = numOwned;\r\n            }\r\n\r\n            // Sort in descending order of number owned\r\n            matches.sort((a, b) => b.numOwned - a.numOwned);\r\n\r\n            // Add requested cards to temp if owned\r\n            for (const match of matches) {\r\n\r\n                // Get number still needed\r\n                const numNeeded = number - temp.length;\r\n\r\n                // Check if done\r\n                if (numNeeded <= 0) {\r\n                    break;\r\n                }\r\n\r\n                // Else see if more copies available\r\n                if (match.numOwned === 0) { // Sorted, so break at first instance of 0 copies\r\n                    break;\r\n                }\r\n\r\n                // Case where we have enough copies of this match to finish\r\n                if (match.numOwned >= numNeeded) {\r\n\r\n                    for(let i=0; i<numNeeded; i++) {\r\n                        temp.push(match);\r\n                    }\r\n\r\n                    // Done\r\n                    break;\r\n                }\r\n\r\n                // Case where we have DON'T have enough copies of this match to finish\r\n                // Add as many as possible, and move to next match\r\n                for(let i=0; i<match.numOwned; i++) {\r\n                    temp.push(match);\r\n                }\r\n            }\r\n\r\n            // Make up deficit with match user owns the most of (not enough copies owned)\r\n            const numNeeded = number - temp.length;\r\n            for(let i=0; i<numNeeded; i++) {\r\n                temp.push(matches[0]);\r\n            }\r\n        }\r\n\r\n        // Change some properties while importing\r\n        for (const card of temp) {\r\n            if (card.set.toLowerCase() === \"dar\") {\r\n                card.set = \"dom\";\r\n            }\r\n        }\r\n\r\n        // Return matching cards\r\n        return temp;\r\n    }\r\n\r\n    /**\r\n     * Takes an array of strings that describe cards for a deck (e.g. \"10 Forest (M20) 278\" or just \"10 Forest\")\r\n     * and returns an array of objects containing the number of cards requested (e.g. 10) and an array of matching\r\n     * card objects, \"matches\"\r\n     * - matches array contains only one card if set and collector number are specified and correct.\r\n     * - matches array may contain multiple cards when only number and name are specified, or if set and collector\r\n     * number yielded no results.\r\n     * \r\n     * @param {array} deckStringsArray The array of strings to parse\r\n     * @returns Array of objects. [ { number, matches: [] }, {...}, ... ]\r\n     * - number: The number of cards requested (zero for no matches).\r\n     * - matches: An array of matching cards (empty array for no matches).\r\n     */\r\n    function getCards(deckStringsArray) {\r\n\r\n        // Regex that parses number of cards, name, set, and collection_number\r\n        const regex4 = /(\\d+)\\s+(.+\\S)\\s+\\((\\w{3,4})\\)\\s+(\\d+)/;\r\n        \r\n        // Regex that parses number of cards, name, and set\r\n        const regex3 = /(\\d+)\\s+(.+\\S)\\s+\\((\\w{3,4})\\)/;\r\n\r\n        // Regex that parses number of cards and name only\r\n        const regex2 = /(\\d+)\\s+(.+\\S)/;\r\n\r\n        // Intended to be called on a section of the whole decklist like \"deck\" or \"sideboard\"\r\n        const sectionCards = []; // Array of objects: [{ number, matches }, ...]\r\n\r\n        // Use regex to extract card info and find matching card(s)\r\n        for (const line of deckStringsArray) {\r\n\r\n            // Skip lines that aren't strings\r\n            if (typeof line !== \"string\") {\r\n                continue;\r\n            }\r\n\r\n            // Check if line has all of (number of cards, name, set, and collection_number)\r\n            let match = line.match(regex4);\r\n\r\n            // Check if line has all of (number of cards, name, and set), but not collection_number\r\n            if (!match) {\r\n                match = line.match(regex3);\r\n            }\r\n\r\n            // Backup when line only has number of cards and name\r\n            if (!match) {\r\n                match = line.match(regex2);\r\n            }\r\n\r\n            // Find matching card(s) if there is a match\r\n            const cards = match? getDeckCard(match[2], match[3], match[4]) : [];\r\n\r\n            // Add the number of cards and the matching cards to the deckCards array\r\n            sectionCards.push({ \"number\": match && match[1]? parseInt(match[1], 10) : 0, \"matches\": cards });\r\n        }\r\n\r\n        return sectionCards;\r\n    }\r\n\r\n    async function fromFile() {\r\n        try {\r\n    \r\n            // Specify text file type\r\n            const options = {\r\n                types: [{ description: 'Text Files', accept: {'text/plain': ['.txt']} }]\r\n            };\r\n\r\n            // Get FileSystemFileHandle from the file picker, chosen from text files\r\n            let [file] = await window.showOpenFilePicker(options);\r\n\r\n            // Get the text file from the FileSystemFileHandle\r\n            file = await file.getFile();\r\n\r\n            // Get the text from the file\r\n            file = await file.text();\r\n\r\n            setImportedText(file);\r\n            \r\n        } catch (error) {\r\n\r\n            setImportedText(\"Sorry, there was an error importing that file.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Copies deck from clipboard\r\n     */\r\n     function fromClipboard() {\r\n        const deckString = toString;\r\n\r\n        // Write deck to clipboard\r\n        navigator.clipboard.readText().then( text => setImportedText(text) );\r\n    }\r\n\r\n    return (\r\n        <div id=\"importExportContent\">\r\n\r\n            <div className=\"spacedModalHeader\">\r\n\r\n                <div className=\"invisible closeButtonSpacer\"/>\r\n\r\n                <h1>Import Deck</h1>\r\n\r\n                <div className=\"closeModalButton\">\r\n                    <button onClick={() => setModalOpen(false)}><i className=\"close icon\"/></button>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Preview/Copy & Paste:</h3>\r\n            <textarea \r\n                id=\"deckPreview\" value={importedText} onChange={e => setImportedText(e.target.value)} spellCheck=\"false\"\r\n            />\r\n\r\n            <div id=\"fileOrClipboardButtons\">\r\n\r\n                <button onClick={fromFile}>\r\n                    Import from File\r\n                </button>\r\n\r\n                <button onClick={fromClipboard}>\r\n                    Copy from Clipboard\r\n                </button>\r\n\r\n                <button onClick={onSubmit}>\r\n                    <strong>Submit</strong>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImportDeck;\r\n","import React, { useState } from 'react';\r\n\r\nimport ExportDeck from './ExportDeck';\r\nimport ImportDeck from './ImportDeck';\r\nimport Modal from '../Templates/Modal';\r\nimport '../../css/ImportExportDeck.css';\r\n\r\n/**\r\n * The import and export deck buttons and their modal\r\n * @returns JSX for the buttons and modal\r\n */\r\nfunction ImportExportModal() {\r\n\r\n    // Import/export modal is open/closed\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    // Determine whether to show the import or export functions (defaults to export)\r\n    const [isImport, setIsImport] = useState(false);\r\n\r\n    // JSX in the modal --> only viewable if modalOpen is true\r\n    const modalContent = (\r\n        <div className=\"importExportModal darkMode\">\r\n            {isImport ? <ImportDeck setModalOpen={setModalOpen} /> : <ExportDeck setModalOpen={setModalOpen} />}\r\n        </div>\r\n    );\r\n\r\n    // If moddalOpen is true --> render the modal, false --> null\r\n    const renderedModal = modalOpen ? <Modal content={modalContent} show={modalOpen} setShow={setModalOpen} /> : null;\r\n\r\n    return (\r\n        <div id='importExportButtons'>\r\n            <button className=\"importExportButton\" title=\"Import Deck Button\"\r\n                onClick={() => {\r\n                    // Select import and open modal\r\n                    setIsImport(true);\r\n                    setModalOpen(!modalOpen);\r\n                }}\r\n            >\r\n                Import Deck\r\n            </button>\r\n            \r\n            <button className=\"importExportButton\" title=\"Export Deck Button\"\r\n                onClick={() => {\r\n                    // Select export and open modal\r\n                    setIsImport(false);\r\n                    setModalOpen(!modalOpen);\r\n                }}\r\n            >\r\n                Export Deck\r\n            </button>\r\n\r\n            {/* Open Modal only when buttons clicked */}\r\n            {renderedModal}            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImportExportModal;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport CustomDropdown from '../Templates/CustomDropdown';\r\nimport ImportExportModal from './ImportExportModal';\r\nimport { selectDeckType, setDeck, setSideboard, changeCommander, changeCompanion } from '../../actions';\r\nimport '../../css/DBDeckOptions.css';\r\n\r\n/**\r\n * Options that affect the deck in the deck builder. Includes the deck type (e.g. standard, limited, etc.), import and\r\n * export buttons, and clear/reset deck button.\r\n */\r\nfunction DBDeckOptions() {\r\n    \r\n    const dispatch = useDispatch();\r\n    const { deckType, deck, sideboard } = useSelector(state => state.deckBuilder);\r\n    \r\n    // Deck/game type\r\n    const items = [ \"standard\", \"historic\", \"limited\", \"brawl\", \"historicbrawl\", \"future\", \"custom\" ];\r\n    const labels = []; labels[4] = \"historic brawl\";\r\n    const renderGameType = <CustomDropdown\r\n        items={items} labels={labels} firstSelection={deckType}\r\n        selectfn={(item) => dispatch(selectDeckType(item))}\r\n        ariaLabel=\"Select deck type\"\r\n    />\r\n\r\n    // Reset deck\r\n    function clearDeck() {\r\n\r\n        // Check the deckType\r\n        if (deckType === 'limited' ){\r\n\r\n            // If creating limited deck --> move all cards from deck to sideboard, then clear deck, companion and commander\r\n            dispatch(setDeck([]));\r\n            dispatch(setSideboard(deck.concat(sideboard).flat()));\r\n            dispatch(changeCommander(null));\r\n            dispatch(changeCompanion(null));\r\n\r\n        } else {\r\n\r\n            // Clear deck, sideboard, companion, and commander\r\n            dispatch(setDeck([]));\r\n            dispatch(setSideboard([]));\r\n            dispatch(changeCommander(null));\r\n            dispatch(changeCompanion(null));\r\n        }\r\n    }\r\n\r\n    const clearButton = (\r\n        <button className=\"clearDeck\"\r\n            onClick={() => clearDeck()}\r\n        >\r\n            {deckType === \"limited\" ? \"Reset to Sideboard\" : \"Clear Deck\"}\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div id=\"DBDeckOptions\">\r\n\r\n            <label htmlFor=\"gameTypeDropDown\">Game Mode:</label>\r\n            <div id=\"gameTypeDropDown\">\r\n                {renderGameType}\r\n            </div>\r\n\r\n            <ImportExportModal />\r\n            {clearButton}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBDeckOptions;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport DBCardFilters from './DBCardFilters';\r\nimport DBDeckOptions from './DBDeckOptions';\r\nimport { setCurrentDragOver } from '../../actions';\r\nimport '../../css/DBSidebar.css';\r\n\r\n/**\r\n * The sidebar for the Deckbuilder\r\n * @returns JSX for sidebar\r\n */\r\nfunction DBSidebar() {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div id=\"DBSidebar\" \r\n            onDragEnter={() => dispatch(setCurrentDragOver())}\r\n        >\r\n            <DBCardFilters />\r\n            <DBDeckOptions />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBSidebar;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setAddType, setCurrentDragOver } from '../../actions';\r\nimport '../../css/DeckHeader.css';\r\n\r\n/**\r\n * Creates the header that separates the available cards to add to a deck and the deckList/sideboard. \r\n * Contains info about the decklist as well as buttons to help build the deck/sideboard. \r\n * @returns JSX\r\n */\r\nfunction DeckHeader() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { addType, deckType, addBasics } = useSelector(state => state.deckBuilder);\r\n    const deckOrSideboard = addType === \"sideboard\" ? false : true;\r\n\r\n    // Changes add type to 'deck' when you switch to limited mode\r\n    useEffect(() => {\r\n        if (deckType === 'limited') {\r\n            dispatch(setAddType('deck'))\r\n        }\r\n    },[deckType, dispatch])\r\n\r\n    // Get the deck array and flatten it;\r\n    let { deck, sideboard, commander, companion } = useSelector(state => state.deckBuilder);\r\n    deck = deck.flat();\r\n\r\n    // Initialize deck counts\r\n    const sideboardCount = companion ? sideboard.flat().length + 1 : sideboard.flat().length;\r\n    let deckCount        = commander ? 1 : 0;\r\n    let landCount        = 0;\r\n    let partialLandCount = 0;\r\n    let creatureCount    = 0; \r\n    let nonCreatureCount = 0;\r\n\r\n    // Count up totals\r\n    for (const card of deck) {\r\n        deckCount++;\r\n        \r\n        // If Creature appears anywhere in the type line update creature count (Do not care if card is double sided)\r\n        if (card.type_line.includes('Creature')) {\r\n            creatureCount++;\r\n        }\r\n\r\n        // Check if single sided (Dual sided cards have each type separated by //)\r\n        if (!card.type_line.includes('//')) {\r\n\r\n            // if land --> update landcount\r\n            if (card.type_line.includes('Land')) {\r\n                landCount++;\r\n            }\r\n            \r\n            // if not creature AND not land --> update noncreature count\r\n            if (!card.type_line.includes('Creature') && !card.type_line.includes('Land')) {\r\n                nonCreatureCount++;\r\n            }\r\n        }\r\n        // Else double sided\r\n        else {\r\n            // Regular expression to capture each side of the //\r\n            // eg. type_line = 'Instant // Land' --> want to capture 'Instant' and 'Land'\r\n            const sideRegex = /(.+) \\/\\/ (.+)/;\r\n            const sides = card.type_line.match(sideRegex);\r\n            const frontType = sides[1];\r\n            const backtype = sides[2];\r\n            \r\n            // if double sided and both sides have type line including 'Land' --> update land count\r\n            if (frontType.includes('Land') && backtype.includes('Land')){\r\n                landCount++;\r\n            } else {\r\n                // if double sided and only 1 side has type_lin including 'Land' --> update partialLandCount\r\n                // Since we know that both sides aren't lands, we can check the whole type_line for land to update partialLandCount\r\n                if (card.type_line.includes('Land')) {\r\n                    partialLandCount++;\r\n                }\r\n            }\r\n\r\n            // Check if is nonCreature\r\n            if (!card.type_line.includes('Creature') && (!frontType.includes('Land') || !backtype.includes('Land'))){\r\n                nonCreatureCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    let partialLandSpan = null;\r\n    if (partialLandCount > 0) {\r\n        partialLandSpan = <span>{`(+${partialLandCount})`}</span>\r\n    }\r\n\r\n    // Function sets the redux that makes the toggle switch sides\r\n    function toggle(event) {\r\n\r\n        event.stopPropagation();\r\n\r\n        // If currently on deck, swap to sideboard\r\n        if(deckOrSideboard) {\r\n            dispatch(setAddType(\"sideboard\"));\r\n        }\r\n        // If currently on sideboard, swap to deck\r\n        else {\r\n            dispatch(setAddType(\"deck\"));\r\n        }\r\n    }\r\n\r\n    // Toggle for deck and sideboard\r\n    // Turnary operator removes this element in limited mode\r\n    const addToggle = deckType === 'limited' ? null : (\r\n        <div\r\n            // Accessibility and events\r\n            className=\"addToggle\" tabIndex=\"0\"\r\n            onKeyDown={ e => {if (e.key === \"Enter\") toggle(e) } }\r\n            onMouseDown={ e => toggle(e) }\r\n            role=\"checkbox\" aria-checked={!deckOrSideboard} aria-label=\"Toggle add to deck or sideboard\"\r\n        >\r\n            {/* Deck */}\r\n            <span className=\"deck_sideboardToggleLabel\">Add to Deck</span>\r\n\r\n            {/* Deck or sideboard toggle */}\r\n            <div className=\"ui fitted toggle checkbox\">\r\n                <input \r\n                    type=\"checkbox\" name=\"deckOrSideboard\" id=\"deckOrSideboard\" tabIndex=\"-1\"\r\n                    checked={!deckOrSideboard} readOnly\r\n                />\r\n                <label tabIndex=\"-1\"></label>\r\n            </div>\r\n\r\n            {/* Sideboard */}\r\n            <span className=\"deck_sideboardToggleLabel\">Add to Sideboard</span>\r\n        </div>\r\n    );\r\n\r\n    // Set add mode to either commander or companion\r\n    function setComType(event, type) {\r\n\r\n        // Don't propagate events to deck header\r\n        event.stopPropagation();\r\n\r\n        // Toggle current type\r\n        if (type !== addType) {\r\n            dispatch(setAddType(type));\r\n        } else {\r\n            dispatch(setAddType(\"deck\"));\r\n        }\r\n    }\r\n\r\n    function setComButton(type) {\r\n\r\n        let buttonText;\r\n        let style = {};\r\n\r\n        if (type === addType) {\r\n            style.filter = \"brightness(70%)\"\r\n        }\r\n\r\n        switch (type) {\r\n            case \"commander\":\r\n                buttonText = \"Set Commander\";\r\n                break;\r\n            case \"companion\":\r\n                buttonText = \"Set Companion\";\r\n                break;\r\n            default:\r\n                buttonText = \"\";\r\n                break;\r\n        }\r\n\r\n        return <button\r\n            // Accessibility and events\r\n            key={`${type}`}\r\n            className=\"setComButton\" tabIndex=\"0\" aria-label={`Set ${type} button`}\r\n            onKeyDown={ e => {if (e.key === \"Enter\") setComType(e, type) } }\r\n            onMouseDown={ e => setComType(e, type) } style={style}\r\n        >\r\n            {buttonText}\r\n        </button>;\r\n    }\r\n\r\n    let comButtons = [];\r\n\r\n    // Don't show add Commander/Companion buttons when adding basic lands. Don't show Commander button unless needed.\r\n    if (addBasics) {}\r\n    else {\r\n        if ( [\"brawl\", \"historicbrawl\", \"custom\"].includes(deckType) ) {\r\n            comButtons.push(setComButton(\"commander\"));\r\n        }\r\n        comButtons.push(setComButton(\"companion\"));\r\n    }\r\n\r\n    return (\r\n        <div className=\"deckHeader\" onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n\r\n            <div className=\"left\">\r\n                <div className=\"deckCount\">Deck: {deckCount}</div>\r\n                <div className=\"landCount\">Land: {landCount}{partialLandSpan}</div>\r\n                <div className=\"creatureCount\">Creatures: {creatureCount}</div>\r\n                <div className=\"nonCreatureCount\">Noncreatures: {nonCreatureCount}</div>\r\n            </div>\r\n\r\n            <div className=\"right\">\r\n                {comButtons}\r\n                <div className=\"sideboardCount\">Sideboard: {sideboardCount}</div>\r\n                {addToggle}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeckHeader;\r\n","import React, { useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { changeCommander, changeCompanion, removeCardFromDeck, addCardToSideboard, setDragCard, dropCard, setCurrentDragOver } from '../../actions';\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport '../../css/DBDeck.css';\r\n\r\n/**\r\n * The cards that are actively in the user's deck.\r\n */\r\nfunction DBDeck() {\r\n    // Access redux dispatcher\r\n    const dispatch = useDispatch();\r\n\r\n    // Get Redux\r\n    const { cardCollection } = useSelector(state => state.inventory);\r\n    const { deck, commander, companion, deckType, addType, currentDragOver } = useSelector(state => state.deckBuilder);\r\n    \r\n    // Make an array of JSX for each of the 8 deck columns\r\n    const renderCards = useMemo(() => {\r\n\r\n        // Track cards added\r\n        const addedToDeck = {};\r\n\r\n        return deck.map((column, i) => {\r\n            let colClass = '';\r\n\r\n            if (currentDragOver.section === 'deck' && currentDragOver.col === i){\r\n                colClass = ' draggingOver';\r\n            }\r\n            return <div \r\n                className={`DBDeckColumn${colClass}`} key={'column'+i} draggable='false'\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={(e) => {\r\n                    e.stopPropagation(); \r\n                    dispatch(dropCard( 'deck', {col:i, row: deck[i].length}));\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={() => {\r\n                    dispatch(setCurrentDragOver('deck', i, deck[i].length));\r\n                }}\r\n            >\r\n                {/* Create a top element above the cards in each column */}\r\n                <div className=\"firstElement\"\r\n                    onDrop={(e) => {\r\n                        e.stopPropagation(); \r\n                        dispatch(dropCard('deck', {col: i, row: -1}))\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('deck', i, -1));\r\n                    }}\r\n                >\r\n                    {deck[i].length} \r\n                </div>\r\n\r\n                {/* Create JSX for each individual card */}\r\n                { column.map( (card, j) => {\r\n\r\n                    // Track that a copy of this card was added to the deck\r\n                    addedToDeck[card.arenaId] = addedToDeck[card.arenaId] ? addedToDeck[card.arenaId]+1 : 1;\r\n\r\n                    let cardStyle = {};\r\n\r\n                    // Add red boarder around cards not legal in current format\r\n                    if (card.legalities && card.legalities[deckType] && card.legalities[deckType] !== \"legal\" ) {\r\n                        cardStyle.boxShadow = '0 0 0 3px red';\r\n                        cardStyle.borderRadius = '5px';\r\n                    }\r\n\r\n                    // Don't mark unowned cards if inventory isn't initialized\r\n                    if (cardCollection && Object.keys(cardCollection).length > 0) {\r\n\r\n                        // Don't color if single copy of basic land owned\r\n                        if (card.type_line.toLowerCase().includes(\"basic\") && card.type_line.toLowerCase().includes(\"land\") \r\n                            && cardCollection[card.arenaId]\r\n                        ) {}\r\n\r\n                        // Special case cards\r\n                        else if (cardCollection[card.arenaId] && cardCollection[card.arenaId] >= 4 &&\r\n                                [70288, 69172, 67306, 76490].includes(card.arenaId)\r\n                        ) {}\r\n\r\n                        // Color unowned copies of this card\r\n                        else if ( (cardCollection[card.arenaId] === undefined) || (addedToDeck[card.arenaId] > cardCollection[card.arenaId]) ) {\r\n\r\n                            // Darken unowned cards\r\n                            cardStyle.filter = \"brightness(50%)\";\r\n                        }\r\n                    }\r\n                    // Make style for dragging cards\r\n                    // Check if column is the same\r\n                    if (currentDragOver.section === 'deck' && currentDragOver.col === i){\r\n                        // Check if row is greater than current dragOver\r\n                        if (j > currentDragOver.row){\r\n                            cardStyle.transform = 'translateY(10px)';\r\n                        }\r\n                    }\r\n\r\n                    return <div \r\n                        className=\"DBDeckCard\" key={'card'+i+j} style={{ zIndex: j }}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                    >\r\n                    <HoverPreview imgs={card.imgs}>\r\n                        <img\r\n                            src={card.imgs.front} alt={card.name} style={cardStyle} draggable='true' tabIndex={0}\r\n                            onDragStart={(e) => {\r\n                                dispatch(setDragCard(card, 'deck', {col: i, row: j}));\r\n                            }}\r\n                            onDragEnd={() => dispatch(setDragCard(null))}\r\n                            onDrop={(e) =>{\r\n                                e.stopPropagation(); \r\n                                dispatch(dropCard('deck', {col: i, row: j}))\r\n                                dispatch(setCurrentDragOver());\r\n                            }}\r\n                            onDragEnter={(e) => {\r\n                                e.stopPropagation();\r\n                                dispatch(setCurrentDragOver('deck',i, j));\r\n                            }}\r\n                            onClick={(e) => {\r\n                                dispatch(removeCardFromDeck(card, i, j));\r\n\r\n                                // If the deckType is limited, move the card to the sideboard\r\n                                if ( deckType === 'limited' ) {\r\n                                    dispatch(addCardToSideboard(card));\r\n                                }\r\n                            }}\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\") {\r\n                                    dispatch(removeCardFromDeck(card, i, j));\r\n\r\n                                    if ( deckType === 'limited' ) {\r\n                                        dispatch(addCardToSideboard(card));\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </HoverPreview>\r\n                    </div>;\r\n                } ) }\r\n            </div>;\r\n        });\r\n    }, [deck, deckType, cardCollection, dispatch, currentDragOver]);\r\n\r\n    // Show commander and companion only when they exist\r\n    const commander_companion = (commander  || companion || addType ==='commander' || addType === 'companion') ? (\r\n        <div id=\"commander_companion\" onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n\r\n            {/* Show commander if it exists */}\r\n            {commander || addType === 'commander' ? (<>\r\n                <div\r\n                    className=\"DBDeckColumn\" draggable='true'\r\n                    onDragOver={(e) => e.preventDefault()}\r\n                    onDragStart={() => dispatch(setDragCard(commander, 'commander', {col: null, row: null}))}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('commander', {col: null, row: null}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('commander'));\r\n                    }}\r\n                >\r\n                    <div className=\"firstElement\">Commander</div>\r\n                    <div className={currentDragOver.section === 'commander'? 'specialCard draggingOver' : \"specialCard\"}>\r\n                        {commander ? <HoverPreview imgs={commander.imgs}>\r\n                            <img\r\n                                src={commander.imgs.front} alt={commander.name} id=\"commanderCard\" tabIndex={0}\r\n                                onClick={() => dispatch(changeCommander())}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        dispatch(changeCommander());\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </HoverPreview> : null}\r\n                    </div>\r\n                </div>\r\n            </>) : null}\r\n\r\n            {/* Show companion if it exists */}\r\n            {companion || addType === 'companion' ? (<>\r\n                <div\r\n                    className=\"DBDeckColumn\" draggable='true'\r\n                    onDragOver={(e) => e.preventDefault()}\r\n                    onDragStart={() => dispatch(setDragCard(companion, 'companion', {col: null, row: null}))}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('companion', {col: null, row: null}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('companion'));\r\n                    }}\r\n                >\r\n                    <div className=\"firstElement\">Companion</div>\r\n                    <div className={currentDragOver.section === 'companion' ? 'specialCard draggingOver' : \"specialCard\"}>\r\n                        {companion ? <HoverPreview imgs={companion.imgs}>\r\n                            <img\r\n                                src={companion.imgs.front} alt={companion.name} id=\"companionCard\" tabIndex={0}\r\n                                onClick={() =>{\r\n                                    dispatch(changeCompanion());\r\n                                    if (deckType === 'limited') {\r\n                                        dispatch(addCardToSideboard(companion));\r\n                                    }\r\n                                }}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        dispatch(changeCompanion());\r\n                                        if (deckType === 'limited') {\r\n                                            dispatch(addCardToSideboard(companion));\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </HoverPreview> : null}\r\n                    </div>\r\n                </div>\r\n            </>) : null}\r\n        </div>\r\n    ) : null;\r\n\r\n    return (\r\n        <div id=\"DBDeck\">\r\n            {commander_companion}\r\n            {renderCards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBDeck;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { removeCardFromSideboard, setDragCard, dropCard, setCurrentDragOver } from './../../actions';\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport '../../css/DBSideboard.css';\r\n\r\nfunction DBSideboard() {\r\n\r\n    // Track whether sideboard is open\r\n    const [ open, setOpen ] = useState(true);\r\n    \r\n    // Redux\r\n    const { cardCollection } = useSelector(state => state.inventory);\r\n    const { deckType, sideboard, currentDragOver } = useSelector(state => state.deckBuilder);\r\n    const dispatch = useDispatch();\r\n\r\n    // Track cards added\r\n    const addedToDeck = {};\r\n\r\n    // Holds card JSX for sideboard\r\n    const renderSBCards = [];\r\n\r\n    // Counter for renderSBCards\r\n    let sbCounter = 0;\r\n\r\n    // Loop through rows in 2d array sideboard\r\n    for (let i=0; i<sideboard.length; i++) {\r\n\r\n        // Alias column in 2d array sideboard\r\n        for (let j=0; j<sideboard[i].length; j++) {\r\n\r\n            // Alias specific card within 2d sideboard\r\n            const card = sideboard[i][j];\r\n\r\n            // Track that a copy of this card was added to the deck\r\n            addedToDeck[card.arenaId] = addedToDeck[card.arenaId] ? addedToDeck[card.arenaId]+1 : 1;\r\n\r\n            let style = {};\r\n\r\n            // Add red boarder around cards not legal in current format\r\n            if (card.legalities && card.legalities[deckType] && card.legalities[deckType] !== \"legal\" ) {\r\n                style.boxShadow = '0 0 0 3px red';\r\n                style.borderRadius = '5px';\r\n            }\r\n\r\n            // Don't mark unowned cards if inventory isn't initialized\r\n            if (cardCollection) {\r\n\r\n                // Don't color if single copy of basic land owned\r\n                if (card.type_line.toLowerCase().includes(\"basic\") && card.type_line.toLowerCase().includes(\"land\") \r\n                    && cardCollection[card.arenaId]\r\n                ) {}\r\n\r\n                // Special case cards\r\n                else if (cardCollection[card.arenaId] && cardCollection[card.arenaId] >= 4 &&\r\n                        [70288, 69172, 67306, 76490].includes(card.arenaId)\r\n                ) {}\r\n\r\n                // Color unowned copies of this card\r\n                else if ( !cardCollection[card.arenaId] || (addedToDeck[card.arenaId] > cardCollection[card.arenaId]) ) {\r\n\r\n                    // Darken unowned cards\r\n                    style.filter = \"brightness(50%)\";\r\n                }\r\n            }\r\n\r\n            // Make style for dragging cards\r\n            if (currentDragOver.section === 'sideboard') {\r\n\r\n                // If the current column is less  --> translate down\r\n                // OR if the current column is the same and the row is bigger that currently being dragged over\r\n                if( currentDragOver.col < i || (currentDragOver.col === i && j > currentDragOver.row )) {\r\n                    style.transform = 'translateY(10px)';\r\n                }\r\n            }\r\n\r\n            // Add cards to render array\r\n            renderSBCards.push(<div className=\"DBDeckCard\" key={card + sbCounter} style={{ zIndex: sbCounter }}>\r\n                <HoverPreview imgs={card.imgs}>\r\n                <img draggable='true'\r\n                    src={card.imgs.front} alt={card.name} style={style}\r\n                    onClick={(e) => {\r\n                        dispatch(removeCardFromSideboard(card, i, j));\r\n                    }}\r\n                    onDragStart={() => {\r\n                        dispatch(setDragCard(card, 'sideboard', {col: i, row: j} ))\r\n                    }}\r\n                    onDragEnd={() => dispatch(setDragCard(null))}\r\n                    onDrop={() => {\r\n                        dispatch(dropCard('sideboard', {col: i, row: j}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) =>{\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', i, j));\r\n                    }}\r\n                />\r\n                </HoverPreview>\r\n            </div>);\r\n\r\n            // Increment counter (for setting z-index)\r\n            sbCounter++;\r\n\r\n        } // End column loop (j)\r\n    } // End row loop (i)\r\n    \r\n    // Flip triangle button direction when opening or closing the sideboard\r\n    let iconClass = 'SBshowButton icon caret right';\r\n    let sideboardClass = 'sideboard';\r\n    if (!open) {\r\n        iconClass = 'SBshowButton icon caret left';\r\n        sideboardClass = 'sideboard closed';\r\n    }\r\n    const showButton = <div className=\"sideboardseparator\">\r\n        <i className={iconClass} onClick={() => setOpen(!open)}/>\r\n\r\n    </div>\r\n\r\n    return (\r\n        <div className={sideboardClass} onDragEnter={() => dispatch(setCurrentDragOver())}>\r\n            {showButton}\r\n            <div className={currentDragOver.section === 'sideboard' ? \"DBDeckColumn draggingOver\" : 'DBDeckColumn'}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={() => {\r\n                    dispatch(dropCard('sideboard', {col: 7, row: sideboard[7].length}))\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={(e) => {\r\n                    e.stopPropagation();\r\n                    dispatch(setCurrentDragOver('sideboard', 7, sideboard[7].length))\r\n                }}\r\n            >\r\n                <div className=\"firstElement\"\r\n                    onDrop={(e) =>{\r\n                        e.stopPropagation(); \r\n                        dispatch(dropCard('sideboard', {col: 0, row: -1}))\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', 0, -1));\r\n                    }}\r\n                >\r\n                </div>\r\n                {renderSBCards}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DBSideboard;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport HoverPreview from '../Templates/HoverPreview';\r\nimport { removeCardFromSideboard, addCardToDeck, limitedSort, setDragCard, dropCard, changeCompanion, setCurrentDragOver } from '../../actions';\r\nimport findCards from '../../data/findCards';\r\nimport '../../css/LimitedSideboard.css';\r\n\r\n/**\r\n * When the deckbuilder is in limited mode, it should change the cardList displayed to the sideboard\r\n * @returns JSX\r\n */\r\nfunction LimitedSideboard() {\r\n    const dispatch = useDispatch();\r\n    const { sideboard } = useSelector(state => state.deckBuilder);\r\n    \r\n    return ( \r\n        <div className=\"limitedSideboard\">\r\n            <div className=\"limitedSideboard-header\">\r\n                <label htmlFor=\"sortButtons\">Sort By:</label>\r\n                <div className=\"sortButtons\">\r\n                    <button className='sortCmc' \r\n                        onClick={() => dispatch(limitedSort('cmc'))}>Mana Value\r\n                    </button>\r\n                    <button className='sortColor'\r\n                        onClick={() => dispatch(limitedSort('color'))}>Color\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"limitedSideboard-cards\">\r\n                <SideboardColumn cardArray={sideboard[0]} col={0}/>\r\n                <SideboardColumn cardArray={sideboard[1]} col={1}/>\r\n                <SideboardColumn cardArray={sideboard[2]} col={2}/>\r\n                <SideboardColumn cardArray={sideboard[3]} col={3}/>\r\n                <SideboardColumn cardArray={sideboard[4]} col={4}/>\r\n                <SideboardColumn cardArray={sideboard[5]} col={5}/>\r\n                <SideboardColumn cardArray={sideboard[6]} col={6}/>\r\n                <SideboardColumn cardArray={sideboard[7]} col={7}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * A helper react component to create a column of cards \r\n * @returns JSX\r\n */\r\nfunction SideboardColumn({cardArray, col}) {\r\n    const dispatch = useDispatch();\r\n    const { colors, rarity, cardTypes, searchTerm, searchType, cmc } = useSelector(state => state.displayOptions);\r\n    const { addType, currentDragOver } = useSelector(state => state.deckBuilder);\r\n   \r\n    // Create rarity search option from rarity object\r\n    let rarityOptions = [];\r\n    for (const option in rarity) {\r\n\r\n        // Add rarity to rarityOption if it's selected\r\n        if (rarity[option]) {\r\n            rarityOptions.push(option);\r\n        }\r\n    }\r\n\r\n    // Make cardTypes retrieved from redux into a usable form for findCards\r\n    // Currently is an array of objects --> Need just simple array\r\n\r\n    let searchCardTypes = undefined; // Initialize as undefined for case where reduxcardTypes is empty\r\n\r\n    if ( cardTypes.length >= 1 ) {\r\n        searchCardTypes = []; // Change to empty array to add push method \r\n\r\n        for (const cardType of cardTypes) {\r\n            // Only push the value property from reduxCardTypes into array\r\n            searchCardTypes.push(cardType.val);\r\n        }\r\n    }\r\n\r\n    // Check the cmc values for \"Any\" string and change them to undefined\r\n    let searchcmc = {...cmc};\r\n\r\n    if (searchcmc.min === 'Any') {\r\n        searchcmc.min = undefined;\r\n    }\r\n    if (searchcmc.max === 'Any') {\r\n        searchcmc.max = undefined;\r\n    }\r\n\r\n    // Set rarityOption to undefined if all or none of the rarities are added to it\r\n    if (rarityOptions.length < 1 || rarityOptions.length > 3) {\r\n        rarityOptions = undefined;\r\n    }\r\n\r\n    // Make searchOptions object\r\n    const searchOptions = {color: colors, rarity: rarityOptions, cardTypes: searchCardTypes, term: searchTerm, advancedSearchType: searchType, cmc: searchcmc, addType};\r\n    // Use findCards to filter the sideboard cards\r\n    const cardList = findCards(searchOptions, cardArray, false);\r\n\r\n    function moveToDeck(event, card) {\r\n        event.stopPropagation();\r\n        dispatch(removeCardFromSideboard(card, col, cardArray.indexOf(card)));\r\n        if (addType === 'deck'){\r\n            dispatch(addCardToDeck(card));\r\n        }\r\n        if (addType === 'companion'){\r\n            dispatch(changeCompanion(card));\r\n        }\r\n    }\r\n\r\n    let renderColumn;\r\n    renderColumn = cardList.map( (card, i )=> {\r\n        let cardStyle = {};\r\n\r\n        // Make style for dragging cards\r\n        // Check if column is the same\r\n        if (currentDragOver.section === 'sideboard' && currentDragOver.col === col){\r\n\r\n            // Check if row is greater than current dragOver\r\n            if (i > currentDragOver.row){\r\n                cardStyle.transform = 'translateY(10px)';\r\n            }\r\n        }\r\n\r\n        return (\r\n            // Using DBDeckCard class from dbdeck\r\n            <div className=\"DBDeckCard\" key={card.name + i} \r\n                onClick={(e) => moveToDeck(e, card)}\r\n            >\r\n                <HoverPreview imgs={card.imgs}>\r\n                    <img src={card.imgs.front} alt={card.name} style={cardStyle}\r\n                    onDragStart={() => {\r\n                        // Cannot use i as row index because if cards are filtered out the index may be incorrect\r\n                        dispatch(setDragCard(card, 'sideboard', {col: col, row: cardArray.indexOf(card)}));\r\n                    }}\r\n                    onDragEnd={() => {\r\n                        dispatch(setDragCard(null));\r\n                    }}\r\n                    onDrop={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(dropCard('sideboard', {col: col, row: cardArray.indexOf(card)}));\r\n                        dispatch(setCurrentDragOver());\r\n                    }}\r\n                    onDragEnter={(e) => {\r\n                        e.stopPropagation();\r\n                        dispatch(setCurrentDragOver('sideboard', col, cardArray.indexOf(card)));\r\n                    }}\r\n                    />\r\n                </HoverPreview>\r\n            </div>\r\n        )\r\n    });    \r\n\r\n    return (\r\n        // Using same styles as dbdeck\r\n        <div className={currentDragOver.section === 'sideboard' && currentDragOver.col === col ? \r\n        'DBDeckColumn draggingOver' : 'DBDeckColumn'}\r\n            onDrop={(e) => {\r\n                e.stopPropagation();\r\n                dispatch(dropCard('sideboard', {col: col, row: cardArray.length}));\r\n                dispatch(setCurrentDragOver());\r\n            }}\r\n            onDragEnter={(e) => {\r\n                e.stopPropagation();\r\n                dispatch(setCurrentDragOver('sideboard', col, cardArray.length));\r\n            }}\r\n        >\r\n            {/* Create a top element above the cards in each column */}\r\n            <div className=\"firstElement\"\r\n                onDrop={(e) =>{\r\n                    e.stopPropagation(); \r\n                    dispatch(dropCard('sideboard', {col: col, row: -1}))\r\n                    dispatch(setCurrentDragOver());\r\n                }}\r\n                onDragEnter={(e) => {\r\n                    e.stopPropagation();\r\n                    dispatch(setCurrentDragOver('sideboard', col, -1));\r\n                }}\r\n                >\r\n                    {cardList.length} \r\n                </div>\r\n            {renderColumn}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LimitedSideboard;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRef } from 'react';\r\n\r\nimport { dropCard } from '../../actions';\r\nimport DBSidebar from './DBSidebar';\r\nimport DeckHeader from './DeckHeader';\r\nimport DBDeck from './DBDeck';\r\nimport CardList from '../All/CardList';\r\nimport DBSideboard from './DBSideboard';\r\nimport LimitedSideboard from './LimitedSideboard';\r\nimport '../../css/DeckBuilder.css';\r\n\r\nfunction DeckBuilder() {\r\n    const cardListRef = useRef();\r\n\r\n    function MoveSlider(e) {\r\n        // Get the current Y position of mouse\r\n        let mouseHeight = e.clientY;\r\n\r\n        // Change overflow-Y from scroll to hidden so it can't randomly scroll\r\n        // Also Add a margin right equal to the size of the scrollbar so elements don't jump\r\n        cardListRef.current.style.overflowY = \"hidden\"\r\n        cardListRef.current.style.marginRight = \"10px\"\r\n        \r\n        // Add event listener for mouse movement\r\n        document.onmousemove = function onMouseMove(e) {\r\n            // Re-Calculate size of cardList\r\n            cardListRef.current.style.height = cardListRef.current.offsetHeight + e.clientY - mouseHeight + \"px\";\r\n            \r\n            // Update mouseHeight\r\n            mouseHeight = e.clientY;\r\n        }\r\n        // Remove event listener for mousemove when you let go of click. Also remove this event\r\n        document.onmouseup = () => {\r\n            document.onmousemove = document.onmouseup = null\r\n\r\n            // Reset scrolling behavior and margin\r\n            cardListRef.current.style.overflowY = \"scroll\"\r\n            cardListRef.current.style.marginRight = \"0\"\r\n        }\r\n    }\r\n    const { deckType, addBasics } = useSelector(state => state.deckBuilder);\r\n    // Change the shown cards to add to deck to the limited sideboard if deckType is limited and not adding basic lands\r\n    const dbCardList = (deckType === 'limited' && !addBasics) ? <LimitedSideboard /> : <CardList scrollingParent={\".dbCardList\"} deckBuilder />;\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div id=\"DeckBuilder\">\r\n            <DBSidebar />\r\n\r\n            <div className=\"mainContent\">\r\n                <div className=\"dbCardList\" ref={cardListRef}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={() => {\r\n                    if ( deckType !=='limited' ) {\r\n                        dispatch(dropCard('collection', null));\r\n                    }\r\n                }}\r\n                >\r\n                    {dbCardList}\r\n                </div>\r\n                <div className=\"slider\" onMouseDown={(e)=>MoveSlider(e)}>\r\n                    <DeckHeader />\r\n                </div>\r\n                <div className=\"deckSection\">\r\n                    <DBDeck />  \r\n                    {deckType ==='limited'? null : <DBSideboard />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeckBuilder;\r\n"],"sourceRoot":""}