{"version":3,"sources":["components/All/SetCard.js","components/All/Home.js","components/All/ProgressBar.js","components/All/RarityCollectionItem.js"],"names":["SetCard","setId","ownedTotal","useSelector","set","inventory","sum","Object","keys","forEach","rarity","setTotal","percentOwned","toFixed","setName","setInfo","name","setCardHeader","className","id","logo","src","alt","aria-label","title","RarityCollectionItem","Home","useState","showStandard","setShowStandard","useEffect","standardPreference","window","localStorage","getItem","collectionTitle","renderToggle","tabIndex","onKeyDown","e","key","toggleStandard","role","aria-checked","type","checked","onChange","standardEnabled","setItem","standardSets","historicSets","map","path","to","ProgressBar","percent","innerClass","innerRef","useRef","current","style","width","ref","symbol","slice","length"],"mappings":"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","file":"static/js/6.315519a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport RarityCollectionItem from './RarityCollectionItem';\r\nimport { setInfo } from '../../data/setInfo'\r\nimport '../../css/SetCard.css';\r\n\r\nfunction SetCard({ setId }) {   \r\n    \r\n    /*\r\n     * Calculate totals from redux state \r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set) {\r\n            // Sum the total cards owned\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].ownedTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => {\r\n        let sum = 0;\r\n        if (set) {\r\n            // Sum the total cards in the set\r\n            Object.keys(set[setId]).forEach( rarity => {sum += set[setId][rarity].setTotal} );\r\n        }\r\n        return sum;\r\n    });\r\n\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n    const setName = setInfo[setId].name;\r\n    let setCardHeader = <div className=\"ui center aligned header\" id=\"setCardHeader\">{setName}</div>;\r\n\r\n    if ( setInfo[setId].logo ) {\r\n        setCardHeader = <div className=\"ui center aligned header\" id=\"setCardHeader\" >\r\n            <img src={setInfo[setId].logo} alt={setName} aria-label={setName} title={setName}/>\r\n            </div>;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"mtgaSetCard\">\r\n            {/* The specific card set */}\r\n            {setCardHeader}\r\n\r\n            {/* Owned cards from this set */}\r\n            <div className=\"ui center aligned sub header\">\r\n                Set Progress:\r\n                &nbsp; &nbsp; &nbsp;\r\n                <span>{ownedTotal} / {setTotal} ({percentOwned}%)</span>\r\n            </div>\r\n\r\n            {/* Owned cards by rarity */}\r\n            <div className=\"ui middle aligned list\">\r\n                <RarityCollectionItem setId={setId} rarity=\"mythic\" />                    \r\n                <RarityCollectionItem setId={setId} rarity=\"rare\" />\r\n                <RarityCollectionItem setId={setId} rarity=\"uncommon\" />\r\n                <RarityCollectionItem setId={setId} rarity=\"common\"/>\r\n            </div>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default SetCard;","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport SetCard from './SetCard';\r\nimport { standardSets, historicSets } from '../../data/setInfo';\r\nimport '../../css/Home.css';\r\n\r\n/**\r\n * Home Page Component - Displays current card sets and other general info/options\r\n */\r\nfunction Home() {\r\n\r\n    // State determines whether to show standard or historic sets\r\n    const [showStandard, setShowStandard] = useState(true);\r\n\r\n    // Use local storage to decide whether to show standard or historic sets\r\n    useEffect(() => {\r\n        // Get value from local storage\r\n        const standardPreference = window.localStorage.getItem(\"showStandard\");\r\n\r\n        if (standardPreference === \"false\") {\r\n            setShowStandard(false);\r\n        }\r\n        else {\r\n            setShowStandard(true);\r\n        }\r\n    }, []);\r\n\r\n    // Use shown sets to determine title\r\n    const collectionTitle = showStandard ? \"Standard Collection\" : \"Historic Collection\";\r\n\r\n    // Render the standard/historic toggle\r\n    const renderToggle = (\r\n        <div\r\n            // Accessibility\r\n            id=\"standardToggle\" tabIndex=\"0\"\r\n            onKeyDown={ e => {if (e.key === \"Enter\") toggleStandard(showStandard)} }\r\n            role=\"checkbox\" aria-checked={!showStandard} aria-label=\"Standard Mode Toggle\"\r\n        >\r\n            <div id=\"standardLabel\">Standard</div>\r\n\r\n            {/* Standard/Historic Toggle */}\r\n            <div className=\"ui fitted toggle checkbox\" id=\"labelColorStandardToggle\">\r\n                <input \r\n                    type=\"checkbox\" name=\"StandardToggle\" id=\"StandardToggle\" tabIndex=\"-1\"\r\n                    checked={!showStandard} onChange={() => toggleStandard(showStandard)}\r\n                />\r\n                <label tabIndex=\"-1\"></label>\r\n            </div>\r\n\r\n            <div id=\"historicLabel\">Historic</div>\r\n        </div>\r\n    );\r\n\r\n    /**\r\n     * Toggles between standard and historic modes\r\n     * @param {boolean} standardEnabled True when standard is enabled\r\n     */\r\n    function toggleStandard(standardEnabled) {\r\n        if (standardEnabled) {\r\n\r\n            setShowStandard(false);\r\n            window.localStorage.setItem(\"showStandard\", \"false\");\r\n        } else {\r\n\r\n            setShowStandard(true);\r\n            window.localStorage.setItem(\"showStandard\", \"true\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Outputs JSX for each of the card sets to be displayed\r\n     */\r\n    function renderSets() {\r\n\r\n        const sets = showStandard ? standardSets : historicSets;\r\n        \r\n        // Create each card set Component based on 'sets' input\r\n        const setCards = sets.map( (setId) => {\r\n            const path = `/set/${setId}`;\r\n\r\n            return (\r\n                <div className=\"ui link card\" key={setId}>\r\n                    <Link to={path}>\r\n                        <SetCard setId={setId} key={setId}/>\r\n                    </Link>\r\n                </div>\r\n            );\r\n        });\r\n        \r\n        return (setCards);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {renderToggle}\r\n\r\n            <div className=\"homePage\">\r\n                <h1 className=\"homeTitle\">{collectionTitle}</h1>\r\n\r\n                <div className='cardSetList'>\r\n                    {renderSets()}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport '../../css/ProgressBar.css'\r\n\r\nfunction ProgressBar({percent, innerClass}) {\r\n    // Make a reference to the inner portion of the progress bar\r\n    const innerRef = useRef();\r\n\r\n    useEffect(()=> {\r\n        innerRef.current.style.width = `${percent}%`;\r\n\r\n    },[percent])\r\n\r\n    return (\r\n        <div className=\"progress-outer\">\r\n            <div className={`progress-inner ${innerClass}`} ref ={innerRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ProgressBar from './ProgressBar';\r\nimport '../../css/RarityCollectionItem.css';\r\n\r\n/**\r\n * Component that contains details about how many cards are owned from a specific set of a specific rarity\r\n * @param {*} setId\r\n * @param {*} rarity\r\n */\r\nfunction RarityCollectionItem({ setId, rarity }) {\r\n\r\n    /*\r\n     * Extract multiple values from redux state\r\n     * - Multiple calls to useSelector used to avoid needing to memoize redux state\r\n     */\r\n    const ownedTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].ownedTotal;\r\n        \r\n        // else no cards found\r\n        return 0;\r\n    });\r\n\r\n    const setTotal = useSelector( ({ inventory: {set} }) => { // Destructure set from state.inventory\r\n        if (set)\r\n            return set[setId][rarity].setTotal;\r\n    });\r\n\r\n    // Calculate percent of cards owned (to one decimal) from specified set of specified rarity\r\n    const percentOwned = ((ownedTotal / setTotal) * 100).toFixed(1);\r\n\r\n    let symbol = setId;\r\n    // Replace some set symbols with another (e.g. give all Historic Anthologies the HA1 symbol)\r\n    if (setId.slice(0, 2) === 'ha') {\r\n        symbol = 'ha1'\r\n    }\r\n    if (setId.length === 4 && setId[0] === 'y') {\r\n        symbol = 'y22'\r\n    }\r\n\r\n    // If there are no cards of this rarity, don't show a progress bar for this rarity\r\n    if (setTotal === 0) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className=\"item \" id=\"collectionItem\" >\r\n            <div className=\"rarityContainer\">\r\n\r\n                <div className=\"rarityText\">\r\n                    <i className={`ss ss-${symbol} ss-${rarity} ss-fw mtgIcon`}/>\r\n                    &nbsp; {/* Force a non-CSS space between icon and text */}\r\n                    {rarity}\r\n                </div>\r\n\r\n                <div className=\"rarityNumber\">\r\n                    <span>{`${ownedTotal} / ${setTotal} (${percentOwned}%)`}</span>\r\n                </div>\r\n            </div>\r\n            <ProgressBar percent={percentOwned} innerClass={rarity}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RarityCollectionItem;"],"sourceRoot":""}